{
  "/@enum/::minsky::Canvas::LassoMode::type": "{ret: \"vector<string>\", args: []}",
  "/@enum/::minsky::ClickType::Type": "{ret: \"vector<string>\", args: []}",
  "/@enum/::minsky::GodleyAssetClass::AssetClass": "{ret: \"vector<string>\", args: []}",
  "/@enum/::minsky::GodleyTable::DisplayStyle": "{ret: \"vector<string>\", args: []}",
  "/@enum/::minsky::Group::IORegion::type": "{ret: \"vector<string>\", args: []}",
  "/@enum/::minsky::ItemTab::ClickType": "{ret: \"vector<string>\", args: []}",
  "/@enum/::minsky::JustificationStruct::Justification": "{ret: \"vector<string>\", args: []}",
  "/@enum/::minsky::Minsky::CmdData": "{ret: \"vector<string>\", args: []}",
  "/@enum/::minsky::OperationType::Group": "{ret: \"vector<string>\", args: []}",
  "/@enum/::minsky::OperationType::Type": "{ret: \"vector<string>\", args: []}",
  "/@enum/::minsky::VariableType::Type": "{ret: \"vector<string>\", args: []}",
  "/RKfunction": {
    "args": ["double", "const double*", "double*", "void*"],
    "ret": "int"
  },
  "/addIntegral": {
    "args": [],
    "ret": "void"
  },
  "/assetClasses": {
    "args": [],
    "ret": "std::vector<std::string>"
  },
  "/autoLayout": {
    "args": [],
    "ret": "void"
  },
  "/autoSaveFile": {
    "args": [],
    "ret": "std::string"
  },
  "/availableOperations": {
    "args": [],
    "ret": "std::vector<std::string>"
  },
  "/balanceDuplicateColumns": {
    "args": ["const ::minsky::GodleyIcon&", "int"],
    "ret": "void"
  },
  "/canvas": [
    {
      "args": [],
      "ret": "::minsky::Canvas"
    },
    {
      "args": ["::minsky::Canvas"],
      "ret": "::minsky::Canvas"
    }
  ],
  "/canvas/addGodley": {
    "args": [],
    "ret": "void"
  },
  "/canvas/addGroup": {
    "args": [],
    "ret": "void"
  },
  "/canvas/addLock": {
    "args": [],
    "ret": "void"
  },
  "/canvas/addNote": {
    "args": ["const std::string&"],
    "ret": "void"
  },
  "/canvas/addOperation": {
    "args": ["::minsky::OperationType::Type"],
    "ret": "void"
  },
  "/canvas/addPlot": {
    "args": [],
    "ret": "void"
  },
  "/canvas/addRavel": {
    "args": [],
    "ret": "void"
  },
  "/canvas/addSheet": {
    "args": [],
    "ret": "void"
  },
  "/canvas/addSwitch": {
    "args": [],
    "ret": "void"
  },
  "/canvas/addVariable": {
    "args": ["const std::string&", "::minsky::VariableType::Type"],
    "ret": "void"
  },
  "/canvas/clickType": [
    {
      "args": [],
      "ret": "std::string"
    },
    {
      "args": ["std::string"],
      "ret": "std::string"
    }
  ],
  "/canvas/closestInPort": {
    "args": ["float", "float"],
    "ret": "classdesc::shared_ptr<::minsky::Port>"
  },
  "/canvas/controlMouseDown": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/canvas/copyAllFlowVars": {
    "args": [],
    "ret": "void"
  },
  "/canvas/copyAllStockVars": {
    "args": [],
    "ret": "void"
  },
  "/canvas/copyItem": {
    "args": [],
    "ret": "void"
  },
  "/canvas/defaultRotation": [
    {
      "args": [],
      "ret": "double"
    },
    {
      "args": ["double"],
      "ret": "double"
    }
  ],
  "/canvas/delHandle": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/canvas/deleteItem": {
    "args": [],
    "ret": "void"
  },
  "/canvas/deleteWire": {
    "args": [],
    "ret": "void"
  },
  "/canvas/displayDelayedTooltip": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/canvas/draw": {
    "args": [],
    "ret": "void"
  },
  "/canvas/findVariableDefinition": {
    "args": [],
    "ret": "bool"
  },
  "/canvas/focusFollowsMouse": [
    {
      "args": [],
      "ret": "bool"
    },
    {
      "args": ["bool"],
      "ret": "bool"
    }
  ],
  "/canvas/getItemAt": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/canvas/getWireAt": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/canvas/groupSelection": {
    "args": [],
    "ret": "void"
  },
  "/canvas/handleSelected": [
    {
      "args": [],
      "ret": "int"
    },
    {
      "args": ["int"],
      "ret": "int"
    }
  ],
  "/canvas/item": [
    {
      "args": [],
      "ret": "::minsky::Item"
    },
    {
      "args": ["::minsky::Item"],
      "ret": "::minsky::Item"
    }
  ],
  "/canvas/itemAt": {
    "args": ["float", "float"],
    "ret": "classdesc::shared_ptr<::minsky::Item>"
  },
  "/canvas/itemFocus": [
    {
      "args": [],
      "ret": "::minsky::Item"
    },
    {
      "args": ["::minsky::Item"],
      "ret": "::minsky::Item"
    }
  ],
  "/canvas/itemIndicator": [
    {
      "args": [],
      "ret": "bool"
    },
    {
      "args": ["bool"],
      "ret": "bool"
    }
  ],
  "/canvas/itemVector": [
    {
      "args": [],
      "ret": "std::vector<classdesc::shared_ptr<::minsky::Item>>"
    },
    {
      "args": ["std::vector<classdesc::shared_ptr<::minsky::Item>>"],
      "ret": "std::vector<classdesc::shared_ptr<::minsky::Item>>"
    }
  ],
  "/canvas/keyPress": {
    "args": ["int", "const std::string&", "int", "float", "float"],
    "ret": "bool"
  },
  "/canvas/lasso": [
    {
      "args": [],
      "ret": "::minsky::LassoBox"
    },
    {
      "args": ["::minsky::LassoBox"],
      "ret": "::minsky::LassoBox"
    }
  ],
  "/canvas/lasso/angle": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/canvas/lasso/contains": {
    "args": ["const ::minsky::Wire&"],
    "ret": "bool"
  },
  "/canvas/lasso/x0": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/canvas/lasso/x1": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/canvas/lasso/y0": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/canvas/lasso/y1": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/canvas/lassoMode": [
    {
      "args": [],
      "ret": "std::string"
    },
    {
      "args": ["std::string"],
      "ret": "std::string"
    }
  ],
  "/canvas/lockRavelsInSelection": {
    "args": [],
    "ret": "void"
  },
  "/canvas/model": [
    {
      "args": [],
      "ret": "::minsky::Canvas::Model"
    },
    {
      "args": ["::minsky::Canvas::Model"],
      "ret": "::minsky::Canvas::Model"
    }
  ],
  "/canvas/model/parent": [
    {
      "args": [],
      "ret": "::minsky::Group"
    },
    {
      "args": ["::minsky::Group"],
      "ret": "::minsky::Group"
    }
  ],
  "/canvas/model/px": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/canvas/model/py": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/canvas/model/pz": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/canvas/model/updateTimestamp": {
    "args": [],
    "ret": "void"
  },
  "/canvas/model/zoom": {
    "args": ["double", "double", "double"],
    "ret": "void"
  },
  "/canvas/mouseDown": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/canvas/mouseMove": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/canvas/mouseUp": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/canvas/moveOffsX": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/canvas/moveOffsY": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/canvas/openGroupInCanvas": {
    "args": ["const classdesc::shared_ptr<::minsky::Item>&"],
    "ret": "void"
  },
  "/canvas/pushDefiningVarsToTab": {
    "args": [],
    "ret": "void"
  },
  "/canvas/recentre": {
    "args": [],
    "ret": "void"
  },
  "/canvas/redraw": [
    {
      "args": ["int", "int", "int", "int"],
      "ret": "bool"
    },
    {
      "args": ["int", "int", "int", "int"],
      "ret": "bool"
    },
    {
      "args": [],
      "ret": "bool"
    }
  ],
  "/canvas/redrawAll": [
    {
      "args": [],
      "ret": "bool"
    },
    {
      "args": ["bool"],
      "ret": "bool"
    }
  ],
  "/canvas/redrawRequested": {
    "args": [],
    "ret": "bool"
  },
  "/canvas/redrawUpdateRegion": {
    "args": [],
    "ret": "bool"
  },
  "/canvas/redrawWithBounds": {
    "args": [],
    "ret": "void"
  },
  "/canvas/registerImage": {
    "args": [],
    "ret": "void"
  },
  "/canvas/removeItemFromItsGroup": {
    "args": [],
    "ret": "void"
  },
  "/canvas/renameAllInstances": {
    "args": ["std::string"],
    "ret": "void"
  },
  "/canvas/renameItem": {
    "args": ["std::string"],
    "ret": "void"
  },
  "/canvas/renderFrame": {
    "args": ["unsigned long", "int", "int", "int", "int"],
    "ret": "void"
  },
  "/canvas/renderToEMF": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/canvas/renderToPDF": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/canvas/renderToPNG": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/canvas/renderToPS": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/canvas/renderToSVG": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/canvas/reportDrawTime": {
    "args": ["double"],
    "ret": "void"
  },
  "/canvas/requestRedraw": {
    "args": [],
    "ret": "void"
  },
  "/canvas/resizeWindow": {
    "args": ["int", "int", "int", "int"],
    "ret": "void"
  },
  "/canvas/resolutionScaleFactor": [
    {
      "args": [],
      "ret": "double"
    },
    {
      "args": ["double"],
      "ret": "double"
    }
  ],
  "/canvas/select": [
    {
      "args": ["float", "float", "float", "float"],
      "ret": "void"
    },
    {
      "args": ["const ::minsky::LassoBox&"],
      "ret": "void"
    }
  ],
  "/canvas/selectAllVariables": {
    "args": [],
    "ret": "void"
  },
  "/canvas/selectVar": {
    "args": ["float", "float"],
    "ret": "bool"
  },
  "/canvas/selection": [
    {
      "args": [],
      "ret": "::minsky::Selection"
    },
    {
      "args": ["::minsky::Selection"],
      "ret": "::minsky::Selection"
    }
  ],
  "/canvas/selection/RESTProcess": [
    {
      "args": ["::classdesc::RESTProcess_t&", "const std::string&"],
      "ret": "void"
    },
    {
      "args": ["::classdesc::RESTProcess_t&", "const std::string&"],
      "ret": "void"
    },
    {
      "args": ["::classdesc::RESTProcess_t&", "const std::string&"],
      "ret": "void"
    },
    {
      "args": ["::classdesc::RESTProcess_t&", "const std::string&"],
      "ret": "void"
    },
    {
      "args": ["::classdesc::RESTProcess_t&", "const std::string&"],
      "ret": "void"
    },
    {
      "args": ["::classdesc::RESTProcess_t&", "const std::string&"],
      "ret": "void"
    }
  ],
  "/canvas/selection/TCL_obj": [
    {
      "args": ["::classdesc::TCL_obj_t&", "const std::string&"],
      "ret": "void"
    },
    {
      "args": ["::classdesc::TCL_obj_t&", "const std::string&"],
      "ret": "void"
    }
  ],
  "/canvas/selection/accessibleVars": {
    "args": [],
    "ret": "std::vector<std::string>"
  },
  "/canvas/selection/addBookmark": {
    "args": ["const std::string&"],
    "ret": "void"
  },
  "/canvas/selection/addGroup": [
    {
      "args": ["const classdesc::shared_ptr<::minsky::Group>&"],
      "ret": "classdesc::shared_ptr<::minsky::Group>"
    },
    {
      "args": ["::minsky::Group*"],
      "ret": "classdesc::shared_ptr<::minsky::Group>"
    }
  ],
  "/canvas/selection/addInputVar": {
    "args": [],
    "ret": "void"
  },
  "/canvas/selection/addItem": [
    {
      "args": ["::minsky::Item*"],
      "ret": "classdesc::shared_ptr<::minsky::Item>"
    },
    {
      "args": ["const classdesc::shared_ptr<::minsky::Item>&", "bool"],
      "ret": "classdesc::shared_ptr<::minsky::Item>"
    },
    {
      "args": ["const classdesc::shared_ptr<::minsky::Item>&", "bool"],
      "ret": "classdesc::shared_ptr<::minsky::Item>"
    },
    {
      "args": ["::minsky::Item*"],
      "ret": "classdesc::shared_ptr<::minsky::Item>"
    }
  ],
  "/canvas/selection/addOutputVar": {
    "args": [],
    "ret": "void"
  },
  "/canvas/selection/addWire": [
    {
      "args": ["const classdesc::shared_ptr<::minsky::Wire>&"],
      "ret": "classdesc::shared_ptr<::minsky::Wire>"
    },
    {
      "args": ["::minsky::Wire*"],
      "ret": "classdesc::shared_ptr<::minsky::Wire>"
    },
    {
      "args": [
        "const ::minsky::Item&",
        "const ::minsky::Item&",
        "unsigned int",
        "const std::vector<float>&"
      ],
      "ret": "classdesc::shared_ptr<::minsky::Wire>"
    },
    {
      "args": [
        "const std::weak_ptr<::minsky::Port>&",
        "const std::weak_ptr<::minsky::Port>&",
        "const std::vector<float>&"
      ],
      "ret": "classdesc::shared_ptr<::minsky::Wire>"
    }
  ],
  "/canvas/selection/adjustWiresGroup": {
    "args": ["::minsky::Wire&"],
    "ret": "void"
  },
  "/canvas/selection/arguments": {
    "args": [],
    "ret": "std::string"
  },
  "/canvas/selection/attachedToDefiningVar": {
    "args": [],
    "ret": "bool"
  },
  "/canvas/selection/autoLayout": {
    "args": [],
    "ret": "void"
  },
  "/canvas/selection/bb": [
    {
      "args": [],
      "ret": "::minsky::BoundingBox"
    },
    {
      "args": ["::minsky::BoundingBox"],
      "ret": "::minsky::BoundingBox"
    }
  ],
  "/canvas/selection/bb/bottom": {
    "args": [],
    "ret": "float"
  },
  "/canvas/selection/bb/contains": {
    "args": ["float", "float"],
    "ret": "bool"
  },
  "/canvas/selection/bb/height": {
    "args": [],
    "ret": "float"
  },
  "/canvas/selection/bb/left": {
    "args": [],
    "ret": "float"
  },
  "/canvas/selection/bb/right": {
    "args": [],
    "ret": "float"
  },
  "/canvas/selection/bb/top": {
    "args": [],
    "ret": "float"
  },
  "/canvas/selection/bb/update": {
    "args": ["const ::minsky::Item&"],
    "ret": "void"
  },
  "/canvas/selection/bb/valid": {
    "args": [],
    "ret": "bool"
  },
  "/canvas/selection/bb/width": {
    "args": [],
    "ret": "float"
  },
  "/canvas/selection/bookmarkList": {
    "args": [],
    "ret": "std::vector<std::string>"
  },
  "/canvas/selection/bookmarks": [
    {
      "args": [],
      "ret": "std::vector<::minsky::Bookmark>"
    },
    {
      "args": ["std::vector<::minsky::Bookmark>"],
      "ret": "std::vector<::minsky::Bookmark>"
    }
  ],
  "/canvas/selection/bottom": {
    "args": [],
    "ret": "float"
  },
  "/canvas/selection/cBounds": {
    "args": [],
    "ret": "ecolab::array<double>"
  },
  "/canvas/selection/checkAddIORegion": {
    "args": ["const classdesc::shared_ptr<::minsky::Item>&"],
    "ret": "void"
  },
  "/canvas/selection/checkUnits": {
    "args": [],
    "ret": "::minsky::Units"
  },
  "/canvas/selection/classType": [
    {
      "args": [],
      "ret": "std::string"
    },
    {
      "args": [],
      "ret": "std::string"
    }
  ],
  "/canvas/selection/clear": [
    {
      "args": [],
      "ret": "void"
    },
    {
      "args": [],
      "ret": "void"
    }
  ],
  "/canvas/selection/clickType": [
    {
      "args": ["float", "float"],
      "ret": "::minsky::ClickType::Type"
    },
    {
      "args": ["float", "float"],
      "ret": "::minsky::ClickType::Type"
    }
  ],
  "/canvas/selection/clone": [
    {
      "args": [],
      "ret": "::minsky::Item*"
    },
    {
      "args": [],
      "ret": "::minsky::ItemT< ::minsky::Group , ::minsky::Item > *"
    },
    {
      "args": [],
      "ret": "::minsky::Group*"
    }
  ],
  "/canvas/selection/closestInPort": {
    "args": ["float", "float"],
    "ret": "classdesc::shared_ptr<::minsky::Port>"
  },
  "/canvas/selection/closestOutPort": {
    "args": ["float", "float"],
    "ret": "classdesc::shared_ptr<::minsky::Port>"
  },
  "/canvas/selection/computeDisplayZoom": {
    "args": [],
    "ret": "float"
  },
  "/canvas/selection/computeRelZoom": {
    "args": [],
    "ret": "void"
  },
  "/canvas/selection/contains": [
    {
      "args": ["float", "float"],
      "ret": "bool"
    },
    {
      "args": ["const classdesc::shared_ptr<::minsky::Item>&"],
      "ret": "bool"
    }
  ],
  "/canvas/selection/contentBounds": {
    "args": ["double&", "double&", "double&", "double&"],
    "ret": "float"
  },
  "/canvas/selection/copy": {
    "args": [],
    "ret": "classdesc::shared_ptr<::minsky::Group>"
  },
  "/canvas/selection/copyUnowned": {
    "args": [],
    "ret": "classdesc::shared_ptr<::minsky::Group>"
  },
  "/canvas/selection/corners": {
    "args": [],
    "ret": "std::vector<boost::geometry::model::d2::point_xy<T,S>>"
  },
  "/canvas/selection/createdIOvariables": [
    {
      "args": [],
      "ret": "std::vector<::minsky::VariablePtr>"
    },
    {
      "args": ["std::vector<::minsky::VariablePtr>"],
      "ret": "std::vector<::minsky::VariablePtr>"
    }
  ],
  "/canvas/selection/defaultExtension": {
    "args": [],
    "ret": "std::string"
  },
  "/canvas/selection/deleteAttachedWires": [
    {
      "args": [],
      "ret": "void"
    },
    {
      "args": [],
      "ret": "void"
    }
  ],
  "/canvas/selection/deleteBookmark": {
    "args": ["unsigned long"],
    "ret": "void"
  },
  "/canvas/selection/deleteCallback": [
    {
      "args": [],
      "ret": "std::string"
    },
    {
      "args": ["std::string"],
      "ret": "std::string"
    }
  ],
  "/canvas/selection/deleteItem": {
    "args": ["const ::minsky::Item&"],
    "ret": "void"
  },
  "/canvas/selection/detailedText": [
    {
      "args": [],
      "ret": "std::string"
    },
    {
      "args": ["std::string"],
      "ret": "std::string"
    }
  ],
  "/canvas/selection/disableDelayedTooltip": {
    "args": [],
    "ret": "void"
  },
  "/canvas/selection/displayContents": {
    "args": [],
    "ret": "bool"
  },
  "/canvas/selection/displayContentsChanged": {
    "args": [],
    "ret": "bool"
  },
  "/canvas/selection/displayDelayedTooltip": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/canvas/selection/displayPlot": [
    {
      "args": [],
      "ret": "::minsky::PlotWidget"
    },
    {
      "args": ["::minsky::PlotWidget"],
      "ret": "::minsky::PlotWidget"
    }
  ],
  "/canvas/selection/displayTooltip": {
    "args": ["cairo_t*", "const std::string&"],
    "ret": "void"
  },
  "/canvas/selection/displayZoom": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/canvas/selection/draw": [
    {
      "args": ["cairo_t*"],
      "ret": "void"
    },
    {
      "args": ["cairo_t*"],
      "ret": "void"
    }
  ],
  "/canvas/selection/draw1edge": {
    "args": ["const std::vector<::minsky::VariablePtr>&", "cairo_t*", "float"],
    "ret": "void"
  },
  "/canvas/selection/drawEdgeVariables": {
    "args": ["cairo_t*"],
    "ret": "void"
  },
  "/canvas/selection/drawIORegion": {
    "args": ["cairo_t*"],
    "ret": "void"
  },
  "/canvas/selection/drawPorts": {
    "args": ["cairo_t*"],
    "ret": "void"
  },
  "/canvas/selection/drawResizeHandles": {
    "args": ["cairo_t*"],
    "ret": "void"
  },
  "/canvas/selection/drawSelected": {
    "args": ["cairo_t*"],
    "ret": "void"
  },
  "/canvas/selection/dummyDraw": {
    "args": [],
    "ret": "void"
  },
  "/canvas/selection/edgeScale": {
    "args": [],
    "ret": "float"
  },
  "/canvas/selection/empty": {
    "args": [],
    "ret": "bool"
  },
  "/canvas/selection/ensureBBValid": {
    "args": [],
    "ret": "void"
  },
  "/canvas/selection/ensureGroupInserted": {
    "args": ["const classdesc::shared_ptr<::minsky::Group>&"],
    "ret": "void"
  },
  "/canvas/selection/ensureItemInserted": {
    "args": ["const classdesc::shared_ptr<::minsky::Item>&"],
    "ret": "void"
  },
  "/canvas/selection/findGroup": {
    "args": ["const ::minsky::Group&"],
    "ret": "classdesc::shared_ptr<::minsky::Group>"
  },
  "/canvas/selection/findItem": {
    "args": ["const ::minsky::Item&"],
    "ret": "classdesc::shared_ptr<::minsky::Item>"
  },
  "/canvas/selection/findWire": {
    "args": ["const ::minsky::Wire&"],
    "ret": "classdesc::shared_ptr<::minsky::Wire>"
  },
  "/canvas/selection/flip": {
    "args": [],
    "ret": "void"
  },
  "/canvas/selection/flipContents": {
    "args": [],
    "ret": "void"
  },
  "/canvas/selection/formula": {
    "args": [],
    "ret": "std::string"
  },
  "/canvas/selection/globalGroup": [
    {
      "args": [],
      "ret": "const ::minsky::Group&"
    },
    {
      "args": [],
      "ret": "::minsky::Group&"
    }
  ],
  "/canvas/selection/gotoBookmark": {
    "args": ["unsigned long"],
    "ret": "void"
  },
  "/canvas/selection/gotoBookmark_b": {
    "args": ["const ::minsky::Bookmark&"],
    "ret": "void"
  },
  "/canvas/selection/groups": [
    {
      "args": [],
      "ret": "std::vector<classdesc::shared_ptr<::minsky::Group>>"
    },
    {
      "args": ["std::vector<classdesc::shared_ptr<::minsky::Group>>"],
      "ret": "std::vector<classdesc::shared_ptr<::minsky::Group>>"
    }
  ],
  "/canvas/selection/height": {
    "args": [],
    "ret": "float"
  },
  "/canvas/selection/higher": {
    "args": ["const ::minsky::Group&"],
    "ret": "bool"
  },
  "/canvas/selection/iHeight": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["const float&"],
      "ret": "float"
    }
  ],
  "/canvas/selection/iWidth": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["const float&"],
      "ret": "float"
    }
  ],
  "/canvas/selection/inIORegion": {
    "args": ["float", "float"],
    "ret": "::minsky::Group::IORegion::type"
  },
  "/canvas/selection/inItem": {
    "args": ["float", "float"],
    "ret": "bool"
  },
  "/canvas/selection/inVariables": [
    {
      "args": [],
      "ret": "std::vector<::minsky::VariablePtr>"
    },
    {
      "args": ["std::vector<::minsky::VariablePtr>"],
      "ret": "std::vector<::minsky::VariablePtr>"
    }
  ],
  "/canvas/selection/insertControlled": {
    "args": ["::minsky::Selection&"],
    "ret": "void"
  },
  "/canvas/selection/insertGroup": {
    "args": ["const classdesc::shared_ptr<::minsky::Group>&"],
    "ret": "void"
  },
  "/canvas/selection/insertItem": {
    "args": ["const classdesc::shared_ptr<::minsky::Item>&"],
    "ret": "void"
  },
  "/canvas/selection/ioVar": {
    "args": [],
    "ret": "bool"
  },
  "/canvas/selection/itemPtrFromThis": {
    "args": [],
    "ret": "classdesc::shared_ptr<::minsky::Item>"
  },
  "/canvas/selection/itemTabX": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/canvas/selection/itemTabY": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/canvas/selection/items": [
    {
      "args": [],
      "ret": "std::vector<classdesc::shared_ptr<::minsky::Item>>"
    },
    {
      "args": ["std::vector<classdesc::shared_ptr<::minsky::Item>>"],
      "ret": "std::vector<classdesc::shared_ptr<::minsky::Item>>"
    }
  ],
  "/canvas/selection/json_pack": [
    {
      "args": ["classdesc::json_pack_t&"],
      "ret": "void"
    },
    {
      "args": ["classdesc::json_pack_t&"],
      "ret": "void"
    }
  ],
  "/canvas/selection/left": {
    "args": [],
    "ret": "float"
  },
  "/canvas/selection/level": {
    "args": [],
    "ret": "unsigned int"
  },
  "/canvas/selection/localZoom": {
    "args": [],
    "ret": "float"
  },
  "/canvas/selection/m_sf": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/canvas/selection/m_x": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/canvas/selection/m_y": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/canvas/selection/margins": {
    "args": ["float&", "float&"],
    "ret": "void"
  },
  "/canvas/selection/marginsV": {
    "args": [],
    "ret": "std::vector<float>"
  },
  "/canvas/selection/minimalEnclosingGroup": [
    {
      "args": ["float", "float", "float", "float", "const ::minsky::Item*"],
      "ret": "const ::minsky::Group*"
    },
    {
      "args": ["float", "float", "float", "float", "const ::minsky::Item*"],
      "ret": "::minsky::Group*"
    }
  ],
  "/canvas/selection/mouseFocus": [
    {
      "args": [],
      "ret": "bool"
    },
    {
      "args": ["bool"],
      "ret": "bool"
    }
  ],
  "/canvas/selection/moveContents": {
    "args": ["::minsky::Group&"],
    "ret": "void"
  },
  "/canvas/selection/moveTo": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/canvas/selection/name": [
    {
      "args": [],
      "ret": "std::string"
    },
    {
      "args": [],
      "ret": "std::string"
    }
  ],
  "/canvas/selection/nocycles": [
    {
      "args": [],
      "ret": "bool"
    },
    {
      "args": [],
      "ret": "bool"
    }
  ],
  "/canvas/selection/normaliseGroupRefs": {
    "args": ["const classdesc::shared_ptr<::minsky::Group>&"],
    "ret": "void"
  },
  "/canvas/selection/numGroups": {
    "args": [],
    "ret": "unsigned long"
  },
  "/canvas/selection/numItems": {
    "args": [],
    "ret": "unsigned long"
  },
  "/canvas/selection/numWires": {
    "args": [],
    "ret": "unsigned long"
  },
  "/canvas/selection/onBorder": [
    {
      "args": [],
      "ret": "bool"
    },
    {
      "args": ["bool"],
      "ret": "bool"
    }
  ],
  "/canvas/selection/onKeyPress": {
    "args": ["int", "const std::string&", "int"],
    "ret": "bool"
  },
  "/canvas/selection/onMouseDown": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/canvas/selection/onMouseLeave": {
    "args": [],
    "ret": "void"
  },
  "/canvas/selection/onMouseMotion": {
    "args": ["float", "float"],
    "ret": "bool"
  },
  "/canvas/selection/onMouseOver": {
    "args": ["float", "float"],
    "ret": "bool"
  },
  "/canvas/selection/onMouseUp": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/canvas/selection/onResizeHandle": {
    "args": ["float", "float"],
    "ret": "bool"
  },
  "/canvas/selection/onResizeHandles": [
    {
      "args": [],
      "ret": "bool"
    },
    {
      "args": ["bool"],
      "ret": "bool"
    }
  ],
  "/canvas/selection/operationCast": [
    {
      "args": [],
      "ret": "const ::minsky::OperationBase*"
    },
    {
      "args": [],
      "ret": "::minsky::OperationBase*"
    }
  ],
  "/canvas/selection/outVariables": [
    {
      "args": [],
      "ret": "std::vector<::minsky::VariablePtr>"
    },
    {
      "args": ["std::vector<::minsky::VariablePtr>"],
      "ret": "std::vector<::minsky::VariablePtr>"
    }
  ],
  "/canvas/selection/plotWidgetCast": [
    {
      "args": [],
      "ret": "const ::minsky::PlotWidget*"
    },
    {
      "args": [],
      "ret": "::minsky::PlotWidget*"
    }
  ],
  "/canvas/selection/portX": {
    "args": ["unsigned long"],
    "ret": "float"
  },
  "/canvas/selection/portY": {
    "args": ["unsigned long"],
    "ret": "float"
  },
  "/canvas/selection/ports": {
    "args": ["unsigned long"],
    "ret": "std::weak_ptr<::minsky::Port>"
  },
  "/canvas/selection/portsSize": {
    "args": [],
    "ret": "unsigned long"
  },
  "/canvas/selection/randomLayout": {
    "args": [],
    "ret": "void"
  },
  "/canvas/selection/relZoom": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/canvas/selection/removeControlledItems": [
    {
      "args": ["::minsky::Group&"],
      "ret": "void"
    },
    {
      "args": [],
      "ret": "void"
    }
  ],
  "/canvas/selection/removeDisplayPlot": {
    "args": [],
    "ret": "void"
  },
  "/canvas/selection/removeGroup": {
    "args": ["const ::minsky::Group&"],
    "ret": "classdesc::shared_ptr<::minsky::Group>"
  },
  "/canvas/selection/removeItem": {
    "args": ["const ::minsky::Item&"],
    "ret": "classdesc::shared_ptr<::minsky::Item>"
  },
  "/canvas/selection/removeWire": {
    "args": ["const ::minsky::Wire&"],
    "ret": "classdesc::shared_ptr<::minsky::Wire>"
  },
  "/canvas/selection/resize": [
    {
      "args": ["const ::minsky::LassoBox&"],
      "ret": "void"
    },
    {
      "args": ["const ::minsky::LassoBox&"],
      "ret": "void"
    }
  ],
  "/canvas/selection/resizeHandleSize": {
    "args": [],
    "ret": "float"
  },
  "/canvas/selection/resizeOnContents": {
    "args": [],
    "ret": "void"
  },
  "/canvas/selection/right": {
    "args": [],
    "ret": "float"
  },
  "/canvas/selection/rotFactor": {
    "args": [],
    "ret": "float"
  },
  "/canvas/selection/rotation": [
    {
      "args": [],
      "ret": "double"
    },
    {
      "args": ["const double&"],
      "ret": "double"
    }
  ],
  "/canvas/selection/scaleFactor": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["const float&"],
      "ret": "float"
    }
  ],
  "/canvas/selection/select": [
    {
      "args": ["float", "float"],
      "ret": "classdesc::shared_ptr<::minsky::Item>"
    },
    {
      "args": ["float", "float"],
      "ret": "classdesc::shared_ptr<::minsky::Item>"
    }
  ],
  "/canvas/selection/selected": [
    {
      "args": [],
      "ret": "bool"
    },
    {
      "args": ["bool"],
      "ret": "bool"
    }
  ],
  "/canvas/selection/setZoom": {
    "args": ["float"],
    "ret": "void"
  },
  "/canvas/selection/splitBoundaryCrossingWires": {
    "args": [],
    "ret": "void"
  },
  "/canvas/selection/svgRenderer": [
    {
      "args": [],
      "ret": "::minsky::SVGRenderer"
    },
    {
      "args": ["::minsky::SVGRenderer"],
      "ret": "::minsky::SVGRenderer"
    }
  ],
  "/canvas/selection/svgRenderer/height": {
    "args": [],
    "ret": "double"
  },
  "/canvas/selection/svgRenderer/render": {
    "args": ["cairo_t*"],
    "ret": "void"
  },
  "/canvas/selection/svgRenderer/setResource": {
    "args": ["const std::string&"],
    "ret": "void"
  },
  "/canvas/selection/svgRenderer/width": {
    "args": [],
    "ret": "double"
  },
  "/canvas/selection/switchIconCast": [
    {
      "args": [],
      "ret": "const ::minsky::SwitchIcon*"
    },
    {
      "args": [],
      "ret": "::minsky::SwitchIcon*"
    }
  ],
  "/canvas/selection/throw_error": {
    "args": ["const std::string&"],
    "ret": "void"
  },
  "/canvas/selection/title": [
    {
      "args": [],
      "ret": "std::string"
    },
    {
      "args": ["std::string"],
      "ret": "std::string"
    }
  ],
  "/canvas/selection/toggleItemMembership": {
    "args": ["const classdesc::shared_ptr<::minsky::Item>&"],
    "ret": "void"
  },
  "/canvas/selection/tooltip": [
    {
      "args": [],
      "ret": "std::string"
    },
    {
      "args": ["std::string"],
      "ret": "std::string"
    }
  ],
  "/canvas/selection/top": {
    "args": [],
    "ret": "float"
  },
  "/canvas/selection/uniqueItems": [
    {
      "args": ["std::set<void*>&"],
      "ret": "bool"
    },
    {
      "args": [],
      "ret": "bool"
    }
  ],
  "/canvas/selection/units": {
    "args": ["bool"],
    "ret": "::minsky::Units"
  },
  "/canvas/selection/updateBoundingBox": {
    "args": [],
    "ret": "void"
  },
  "/canvas/selection/updateIcon": {
    "args": ["double"],
    "ret": "void"
  },
  "/canvas/selection/value": {
    "args": [],
    "ret": "double"
  },
  "/canvas/selection/variableCast": [
    {
      "args": [],
      "ret": "const ::minsky::VariableBase*"
    },
    {
      "args": [],
      "ret": "::minsky::VariableBase*"
    }
  ],
  "/canvas/selection/visible": {
    "args": [],
    "ret": "bool"
  },
  "/canvas/selection/width": {
    "args": [],
    "ret": "float"
  },
  "/canvas/selection/wires": [
    {
      "args": [],
      "ret": "std::vector<classdesc::shared_ptr<::minsky::Wire>>"
    },
    {
      "args": ["std::vector<classdesc::shared_ptr<::minsky::Wire>>"],
      "ret": "std::vector<classdesc::shared_ptr<::minsky::Wire>>"
    }
  ],
  "/canvas/selection/x": {
    "args": [],
    "ret": "float"
  },
  "/canvas/selection/y": {
    "args": [],
    "ret": "float"
  },
  "/canvas/selection/zoom": {
    "args": ["float", "float", "float"],
    "ret": "void"
  },
  "/canvas/selection/zoomFactor": {
    "args": [],
    "ret": "float"
  },
  "/canvas/setItemFocus": {
    "args": ["const classdesc::shared_ptr<::minsky::Item>&"],
    "ret": "void"
  },
  "/canvas/showDefiningVarsOnCanvas": {
    "args": [],
    "ret": "void"
  },
  "/canvas/showPlotsOnTab": {
    "args": [],
    "ret": "void"
  },
  "/canvas/surface": {
    "args": [],
    "ret": "classdesc::shared_ptr<ecolab::cairo::Surface>&"
  },
  "/canvas/termX": [
    {
      "args": [],
      "ret": "double"
    },
    {
      "args": ["double"],
      "ret": "double"
    }
  ],
  "/canvas/termY": [
    {
      "args": [],
      "ret": "double"
    },
    {
      "args": ["double"],
      "ret": "double"
    }
  ],
  "/canvas/ungroupItem": {
    "args": [],
    "ret": "void"
  },
  "/canvas/unlockRavelsInSelection": {
    "args": [],
    "ret": "void"
  },
  "/canvas/updateRegion": [
    {
      "args": [],
      "ret": "::minsky::LassoBox"
    },
    {
      "args": ["::minsky::LassoBox"],
      "ret": "::minsky::LassoBox"
    }
  ],
  "/canvas/updateRegion/angle": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/canvas/updateRegion/contains": {
    "args": ["const ::minsky::Wire&"],
    "ret": "bool"
  },
  "/canvas/updateRegion/x0": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/canvas/updateRegion/x1": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/canvas/updateRegion/y0": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/canvas/updateRegion/y1": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/canvas/vectorRender": {
    "args": ["const char*", "<function>*"],
    "ret": "classdesc::shared_ptr<ecolab::cairo::Surface>"
  },
  "/canvas/wire": [
    {
      "args": [],
      "ret": "::minsky::Wire"
    },
    {
      "args": ["::minsky::Wire"],
      "ret": "::minsky::Wire"
    }
  ],
  "/canvas/wireFocus": [
    {
      "args": [],
      "ret": "::minsky::Wire"
    },
    {
      "args": ["::minsky::Wire"],
      "ret": "::minsky::Wire"
    }
  ],
  "/canvas/zoomToDisplay": {
    "args": [],
    "ret": "void"
  },
  "/checkEquationOrder": {
    "args": [],
    "ret": "bool"
  },
  "/checkMemAllocation": {
    "args": ["unsigned long"],
    "ret": "bool"
  },
  "/checkPushHistory": {
    "args": [],
    "ret": "void"
  },
  "/classifyOp": {
    "args": ["::minsky::OperationType::Type"],
    "ret": "::minsky::OperationType::Group"
  },
  "/clearAllMaps": {
    "args": [],
    "ret": "void"
  },
  "/clearBusyCursor": {
    "args": [],
    "ret": "void"
  },
  "/clearHistory": {
    "args": [],
    "ret": "void"
  },
  "/closeLogFile": {
    "args": [],
    "ret": "void"
  },
  "/commandHook": {
    "args": ["const std::string&", "unsigned int"],
    "ret": "bool"
  },
  "/constructEquations": {
    "args": [],
    "ret": "void"
  },
  "/conversions": [
    {
      "args": [],
      "ret": "::civita::Conversions"
    },
    {
      "args": ["::civita::Conversions"],
      "ret": "::civita::Conversions"
    }
  ],
  "/conversions/convert": {
    "args": ["double", "const std::string&", "const std::string&"],
    "ret": "double"
  },
  "/convertVarType": {
    "args": ["const std::string&", "::minsky::VariableType::Type"],
    "ret": "void"
  },
  "/copy": {
    "args": [],
    "ret": "void"
  },
  "/cut": {
    "args": [],
    "ret": "void"
  },
  "/cycleCheck": {
    "args": [],
    "ret": "bool"
  },
  "/defaultFont": [
    {
      "args": [],
      "ret": "std::string"
    },
    {
      "args": ["const std::string&"],
      "ret": "std::string"
    }
  ],
  "/definingVar": {
    "args": ["const std::string&"],
    "ret": "::minsky::VariablePtr"
  },
  "/deleteAllUnits": {
    "args": [],
    "ret": "void"
  },
  "/deltaT": {
    "args": [],
    "ret": "double"
  },
  "/dimensionalAnalysis": {
    "args": [],
    "ret": "void"
  },
  "/dimensions": [
    {
      "args": [],
      "ret": "std::map<std::string,::civita::Dimension>"
    },
    {
      "args": ["std::map<std::string,::civita::Dimension>"],
      "ret": "std::map<std::string,::civita::Dimension>"
    }
  ],
  "/displayErrorItem": {
    "args": ["const ::minsky::Item&"],
    "ret": "void"
  },
  "/displayStyle": [
    {
      "args": [],
      "ret": "std::string"
    },
    {
      "args": ["std::string"],
      "ret": "std::string"
    }
  ],
  "/displayValues": [
    {
      "args": [],
      "ret": "bool"
    },
    {
      "args": ["bool"],
      "ret": "bool"
    }
  ],
  "/doPushHistory": [
    {
      "args": [],
      "ret": "bool"
    },
    {
      "args": ["bool"],
      "ret": "bool"
    }
  ],
  "/ecolabVersion": {
    "args": [],
    "ret": "std::string"
  },
  "/edited": {
    "args": [],
    "ret": "bool"
  },
  "/epsAbs": [
    {
      "args": [],
      "ret": "double"
    },
    {
      "args": ["double"],
      "ret": "double"
    }
  ],
  "/epsRel": [
    {
      "args": [],
      "ret": "double"
    },
    {
      "args": ["double"],
      "ret": "double"
    }
  ],
  "/equationDisplay": [
    {
      "args": [],
      "ret": "::minsky::EquationDisplay"
    },
    {
      "args": ["::minsky::EquationDisplay"],
      "ret": "::minsky::EquationDisplay"
    }
  ],
  "/equationDisplay/draw": {
    "args": [],
    "ret": "void"
  },
  "/equationDisplay/height": {
    "args": [],
    "ret": "double"
  },
  "/equationDisplay/offsx": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/equationDisplay/offsy": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/equationDisplay/redraw": {
    "args": ["int", "int", "int", "int"],
    "ret": "bool"
  },
  "/equationDisplay/redrawWithBounds": {
    "args": [],
    "ret": "void"
  },
  "/equationDisplay/registerImage": {
    "args": [],
    "ret": "void"
  },
  "/equationDisplay/renderFrame": {
    "args": ["unsigned long", "int", "int", "int", "int"],
    "ret": "void"
  },
  "/equationDisplay/renderToEMF": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/equationDisplay/renderToPDF": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/equationDisplay/renderToPNG": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/equationDisplay/renderToPS": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/equationDisplay/renderToSVG": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/equationDisplay/reportDrawTime": {
    "args": ["double"],
    "ret": "void"
  },
  "/equationDisplay/requestRedraw": {
    "args": [],
    "ret": "void"
  },
  "/equationDisplay/resizeWindow": {
    "args": ["int", "int", "int", "int"],
    "ret": "void"
  },
  "/equationDisplay/resolutionScaleFactor": [
    {
      "args": [],
      "ret": "double"
    },
    {
      "args": ["double"],
      "ret": "double"
    }
  ],
  "/equationDisplay/vectorRender": {
    "args": ["const char*", "<function>*"],
    "ret": "classdesc::shared_ptr<ecolab::cairo::Surface>"
  },
  "/equationDisplay/width": {
    "args": [],
    "ret": "double"
  },
  "/evalEquations": {
    "args": [],
    "ret": "void"
  },
  "/evalGodley": [
    {
      "args": [],
      "ret": "::minsky::EvalGodley"
    },
    {
      "args": ["::minsky::EvalGodley"],
      "ret": "::minsky::EvalGodley"
    }
  ],
  "/evalGodley/compatibility": [
    {
      "args": [],
      "ret": "bool"
    },
    {
      "args": ["bool"],
      "ret": "bool"
    }
  ],
  "/evalGodley/eval": {
    "args": ["double*", "const double*"],
    "ret": "void"
  },
  "/exportAllPlotsAsCSV": {
    "args": ["const std::string&"],
    "ret": "void"
  },
  "/exportSchema": {
    "args": ["const char*", "int"],
    "ret": "void"
  },
  "/fileVersion": [
    {
      "args": [],
      "ret": "std::string"
    },
    {
      "args": ["std::string"],
      "ret": "std::string"
    }
  ],
  "/flowVars": [
    {
      "args": [],
      "ret": "std::vector<double>"
    },
    {
      "args": ["std::vector<double>"],
      "ret": "std::vector<double>"
    }
  ],
  "/fontSampler": [
    {
      "args": [],
      "ret": "::minsky::FontDisplay"
    },
    {
      "args": ["::minsky::FontDisplay"],
      "ret": "::minsky::FontDisplay"
    }
  ],
  "/fontSampler/draw": {
    "args": [],
    "ret": "void"
  },
  "/fontSampler/redraw": [
    {
      "args": ["int", "int", "int", "int"],
      "ret": "bool"
    },
    {
      "args": ["int", "int", "int", "int"],
      "ret": "bool"
    }
  ],
  "/fontSampler/redrawWithBounds": {
    "args": [],
    "ret": "void"
  },
  "/fontSampler/registerImage": {
    "args": [],
    "ret": "void"
  },
  "/fontSampler/renderFrame": {
    "args": ["unsigned long", "int", "int", "int", "int"],
    "ret": "void"
  },
  "/fontSampler/renderToEMF": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/fontSampler/renderToPDF": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/fontSampler/renderToPNG": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/fontSampler/renderToPS": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/fontSampler/renderToSVG": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/fontSampler/reportDrawTime": {
    "args": ["double"],
    "ret": "void"
  },
  "/fontSampler/requestRedraw": {
    "args": [],
    "ret": "void"
  },
  "/fontSampler/resizeWindow": {
    "args": ["int", "int", "int", "int"],
    "ret": "void"
  },
  "/fontSampler/resolutionScaleFactor": [
    {
      "args": [],
      "ret": "double"
    },
    {
      "args": ["double"],
      "ret": "double"
    }
  ],
  "/fontSampler/vectorRender": {
    "args": ["const char*", "<function>*"],
    "ret": "classdesc::shared_ptr<ecolab::cairo::Surface>"
  },
  "/garbageCollect": {
    "args": [],
    "ret": "void"
  },
  "/getClipboard": {
    "args": [],
    "ret": "std::string"
  },
  "/getCommandData": {
    "args": ["const std::string&"],
    "ret": "::minsky::Minsky::CmdData"
  },
  "/godleyTab": [
    {
      "args": [],
      "ret": "::minsky::GodleyTab"
    },
    {
      "args": ["::minsky::GodleyTab"],
      "ret": "::minsky::GodleyTab"
    }
  ],
  "/godleyTab/bottomRowMargin": [
    {
      "args": [],
      "ret": "std::vector<double>"
    },
    {
      "args": ["std::vector<double>"],
      "ret": "std::vector<double>"
    }
  ],
  "/godleyTab/cell": [
    {
      "args": ["unsigned int", "unsigned int"],
      "ret": "::ecolab::Pango&"
    },
    {
      "args": ["unsigned int", "unsigned int"],
      "ret": "::ecolab::Pango&"
    }
  ],
  "/godleyTab/clickType": [
    {
      "args": ["double", "double"],
      "ret": "::minsky::ItemTab::ClickType"
    },
    {
      "args": ["double", "double"],
      "ret": "::minsky::ItemTab::ClickType"
    }
  ],
  "/godleyTab/colX": {
    "args": ["double"],
    "ret": "int"
  },
  "/godleyTab/displayDelayedTooltip": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/godleyTab/draw": [
    {
      "args": [],
      "ret": "void"
    },
    {
      "args": [],
      "ret": "void"
    },
    {
      "args": ["cairo_t*"],
      "ret": "void"
    },
    {
      "args": ["cairo_t*"],
      "ret": "void"
    }
  ],
  "/godleyTab/evenHeight": {
    "args": [],
    "ret": "bool"
  },
  "/godleyTab/getItemAt": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/godleyTab/getVarName": {
    "args": ["int"],
    "ret": "std::string"
  },
  "/godleyTab/height": {
    "args": [],
    "ret": "float"
  },
  "/godleyTab/item": [
    {
      "args": [],
      "ret": "::minsky::Item"
    },
    {
      "args": ["::minsky::Item"],
      "ret": "::minsky::Item"
    }
  ],
  "/godleyTab/itemAt": [
    {
      "args": ["float", "float"],
      "ret": "classdesc::shared_ptr<::minsky::Item>"
    },
    {
      "args": ["float", "float"],
      "ret": "classdesc::shared_ptr<::minsky::Item>"
    }
  ],
  "/godleyTab/itemFocus": [
    {
      "args": [],
      "ret": "::minsky::Item"
    },
    {
      "args": ["::minsky::Item"],
      "ret": "::minsky::Item"
    }
  ],
  "/godleyTab/itemSelector": [
    {
      "args": ["const classdesc::shared_ptr<::minsky::Item>&"],
      "ret": "bool"
    },
    {
      "args": ["const classdesc::shared_ptr<::minsky::Item>&"],
      "ret": "bool"
    }
  ],
  "/godleyTab/itemVector": [
    {
      "args": [],
      "ret": "std::vector<classdesc::shared_ptr<::minsky::Item>>"
    },
    {
      "args": ["std::vector<classdesc::shared_ptr<::minsky::Item>>"],
      "ret": "std::vector<classdesc::shared_ptr<::minsky::Item>>"
    }
  ],
  "/godleyTab/justification": {
    "args": ["unsigned int"],
    "ret": "::minsky::JustificationStruct::Justification"
  },
  "/godleyTab/m_height": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/godleyTab/m_width": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/godleyTab/mouseDownCommon": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/godleyTab/mouseMove": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/godleyTab/mouseUp": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/godleyTab/moveItemTo": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/godleyTab/moveOffsX": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/godleyTab/moveOffsY": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/godleyTab/moveTo": {
    "args": ["double", "double"],
    "ret": "void"
  },
  "/godleyTab/numCols": [
    {
      "args": [],
      "ret": "unsigned int"
    },
    {
      "args": [],
      "ret": "unsigned int"
    }
  ],
  "/godleyTab/numRows": [
    {
      "args": [],
      "ret": "unsigned int"
    },
    {
      "args": [],
      "ret": "unsigned int"
    }
  ],
  "/godleyTab/offsx": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/godleyTab/offsy": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/godleyTab/populateItemVector": {
    "args": [],
    "ret": "void"
  },
  "/godleyTab/redraw": [
    {
      "args": ["int", "int", "int", "int"],
      "ret": "bool"
    },
    {
      "args": ["int", "int", "int", "int"],
      "ret": "bool"
    }
  ],
  "/godleyTab/redrawWithBounds": {
    "args": [],
    "ret": "void"
  },
  "/godleyTab/registerImage": {
    "args": [],
    "ret": "void"
  },
  "/godleyTab/renderFrame": {
    "args": ["unsigned long", "int", "int", "int", "int"],
    "ret": "void"
  },
  "/godleyTab/renderToEMF": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/godleyTab/renderToPDF": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/godleyTab/renderToPNG": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/godleyTab/renderToPS": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/godleyTab/renderToSVG": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/godleyTab/reportDrawTime": {
    "args": ["double"],
    "ret": "void"
  },
  "/godleyTab/requestRedraw": {
    "args": [],
    "ret": "void"
  },
  "/godleyTab/resizeWindow": {
    "args": ["int", "int", "int", "int"],
    "ret": "void"
  },
  "/godleyTab/resolutionScaleFactor": [
    {
      "args": [],
      "ret": "double"
    },
    {
      "args": ["double"],
      "ret": "double"
    }
  ],
  "/godleyTab/rightColMargin": [
    {
      "args": [],
      "ret": "std::vector<double>"
    },
    {
      "args": ["std::vector<double>"],
      "ret": "std::vector<double>"
    }
  ],
  "/godleyTab/rowY": {
    "args": ["double"],
    "ret": "int"
  },
  "/godleyTab/toggleVarDisplay": {
    "args": ["int"],
    "ret": "void"
  },
  "/godleyTab/varAttrib": [
    {
      "args": [],
      "ret": "std::vector<std::string>"
    },
    {
      "args": ["std::vector<std::string>"],
      "ret": "std::vector<std::string>"
    }
  ],
  "/godleyTab/vectorRender": {
    "args": ["const char*", "<function>*"],
    "ret": "classdesc::shared_ptr<ecolab::cairo::Surface>"
  },
  "/godleyTab/width": {
    "args": [],
    "ret": "float"
  },
  "/godleyTab/xItem": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/godleyTab/xoffs": [
    {
      "args": [],
      "ret": "double"
    },
    {
      "args": ["double"],
      "ret": "double"
    }
  ],
  "/godleyTab/yItem": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/implicit": [
    {
      "args": [],
      "ret": "bool"
    },
    {
      "args": ["bool"],
      "ret": "bool"
    }
  ],
  "/importDuplicateColumn": {
    "args": ["::minsky::GodleyTable&", "int"],
    "ret": "void"
  },
  "/importVensim": {
    "args": ["const std::string&"],
    "ret": "void"
  },
  "/imposeDimensions": {
    "args": [],
    "ret": "void"
  },
  "/initGodleys": {
    "args": [],
    "ret": "void"
  },
  "/inputWired": {
    "args": ["const std::string&"],
    "ret": "bool"
  },
  "/insertGroupFromFile": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/jacobian": {
    "args": ["double", "const double*", "double*", "double*", "void*"],
    "ret": "int"
  },
  "/lastT": [
    {
      "args": [],
      "ret": "double"
    },
    {
      "args": ["double"],
      "ret": "double"
    }
  ],
  "/latex": {
    "args": ["const char*", "bool"],
    "ret": "void"
  },
  "/latex2pango": {
    "args": ["const char*"],
    "ret": "std::string"
  },
  "/listFonts": {
    "args": [],
    "ret": "std::vector<std::string>"
  },
  "/load": {
    "args": ["const std::string&"],
    "ret": "void"
  },
  "/logVarList": [
    {
      "args": [],
      "ret": "std::set<std::string>"
    },
    {
      "args": ["std::set<std::string>"],
      "ret": "std::set<std::string>"
    }
  ],
  "/makeVariablesConsistent": {
    "args": [],
    "ret": "void"
  },
  "/markEdited": {
    "args": [],
    "ret": "void"
  },
  "/matchingTableColumns": {
    "args": [
      "const ::minsky::GodleyIcon&",
      "::minsky::GodleyAssetClass::AssetClass"
    ],
    "ret": "std::set<std::string>"
  },
  "/matlab": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/maxHistory": [
    {
      "args": [],
      "ret": "unsigned int"
    },
    {
      "args": ["unsigned int"],
      "ret": "unsigned int"
    }
  ],
  "/maxWaitMS": [
    {
      "args": [],
      "ret": "int"
    },
    {
      "args": ["int"],
      "ret": "int"
    }
  ],
  "/message": {
    "args": ["const std::string&"],
    "ret": "void"
  },
  "/minskyVersion": [
    {
      "args": [],
      "ret": "const std::string"
    },
    {
      "args": ["const std::string"],
      "ret": "const std::string"
    }
  ],
  "/model": [
    {
      "args": [],
      "ret": "::minsky::Group"
    },
    {
      "args": ["::minsky::Group"],
      "ret": "::minsky::Group"
    }
  ],
  "/multipleEquities": [
    {
      "args": [],
      "ret": "bool"
    },
    {
      "args": ["bool"],
      "ret": "bool"
    }
  ],
  "/nSteps": [
    {
      "args": [],
      "ret": "int"
    },
    {
      "args": ["int"],
      "ret": "int"
    }
  ],
  "/numOpArgs": {
    "args": ["::minsky::OperationType::Type"],
    "ret": "int"
  },
  "/openGroupInCanvas": {
    "args": [],
    "ret": "void"
  },
  "/openLogFile": {
    "args": ["const std::string&"],
    "ret": "void"
  },
  "/openModelInCanvas": {
    "args": [],
    "ret": "void"
  },
  "/order": [
    {
      "args": [],
      "ret": "int"
    },
    {
      "args": ["int"],
      "ret": "int"
    }
  ],
  "/panopticon": [
    {
      "args": [],
      "ret": "::minsky::Panopticon"
    },
    {
      "args": ["::minsky::Panopticon"],
      "ret": "::minsky::Panopticon"
    }
  ],
  "/panopticon/canvas": [
    {
      "args": [],
      "ret": "::minsky::Canvas"
    },
    {
      "args": ["::minsky::Canvas"],
      "ret": "::minsky::Canvas"
    }
  ],
  "/panopticon/canvas/addGodley": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/canvas/addGroup": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/canvas/addLock": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/canvas/addNote": {
    "args": ["const std::string&"],
    "ret": "void"
  },
  "/panopticon/canvas/addOperation": {
    "args": ["::minsky::OperationType::Type"],
    "ret": "void"
  },
  "/panopticon/canvas/addPlot": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/canvas/addRavel": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/canvas/addSheet": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/canvas/addSwitch": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/canvas/addVariable": {
    "args": ["const std::string&", "::minsky::VariableType::Type"],
    "ret": "void"
  },
  "/panopticon/canvas/clickType": [
    {
      "args": [],
      "ret": "std::string"
    },
    {
      "args": ["std::string"],
      "ret": "std::string"
    }
  ],
  "/panopticon/canvas/closestInPort": {
    "args": ["float", "float"],
    "ret": "classdesc::shared_ptr<::minsky::Port>"
  },
  "/panopticon/canvas/controlMouseDown": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/panopticon/canvas/copyAllFlowVars": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/canvas/copyAllStockVars": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/canvas/copyItem": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/canvas/defaultRotation": [
    {
      "args": [],
      "ret": "double"
    },
    {
      "args": ["double"],
      "ret": "double"
    }
  ],
  "/panopticon/canvas/delHandle": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/panopticon/canvas/deleteItem": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/canvas/deleteWire": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/canvas/displayDelayedTooltip": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/panopticon/canvas/draw": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/canvas/findVariableDefinition": {
    "args": [],
    "ret": "bool"
  },
  "/panopticon/canvas/focusFollowsMouse": [
    {
      "args": [],
      "ret": "bool"
    },
    {
      "args": ["bool"],
      "ret": "bool"
    }
  ],
  "/panopticon/canvas/getItemAt": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/panopticon/canvas/getWireAt": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/panopticon/canvas/groupSelection": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/canvas/handleSelected": [
    {
      "args": [],
      "ret": "int"
    },
    {
      "args": ["int"],
      "ret": "int"
    }
  ],
  "/panopticon/canvas/item": [
    {
      "args": [],
      "ret": "::minsky::Item"
    },
    {
      "args": ["::minsky::Item"],
      "ret": "::minsky::Item"
    }
  ],
  "/panopticon/canvas/itemAt": {
    "args": ["float", "float"],
    "ret": "classdesc::shared_ptr<::minsky::Item>"
  },
  "/panopticon/canvas/itemFocus": [
    {
      "args": [],
      "ret": "::minsky::Item"
    },
    {
      "args": ["::minsky::Item"],
      "ret": "::minsky::Item"
    }
  ],
  "/panopticon/canvas/itemIndicator": [
    {
      "args": [],
      "ret": "bool"
    },
    {
      "args": ["bool"],
      "ret": "bool"
    }
  ],
  "/panopticon/canvas/itemVector": [
    {
      "args": [],
      "ret": "std::vector<classdesc::shared_ptr<::minsky::Item>>"
    },
    {
      "args": ["std::vector<classdesc::shared_ptr<::minsky::Item>>"],
      "ret": "std::vector<classdesc::shared_ptr<::minsky::Item>>"
    }
  ],
  "/panopticon/canvas/keyPress": {
    "args": ["int", "const std::string&", "int", "float", "float"],
    "ret": "bool"
  },
  "/panopticon/canvas/lasso": [
    {
      "args": [],
      "ret": "::minsky::LassoBox"
    },
    {
      "args": ["::minsky::LassoBox"],
      "ret": "::minsky::LassoBox"
    }
  ],
  "/panopticon/canvas/lasso/angle": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/panopticon/canvas/lasso/contains": {
    "args": ["const ::minsky::Wire&"],
    "ret": "bool"
  },
  "/panopticon/canvas/lasso/x0": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/panopticon/canvas/lasso/x1": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/panopticon/canvas/lasso/y0": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/panopticon/canvas/lasso/y1": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/panopticon/canvas/lassoMode": [
    {
      "args": [],
      "ret": "std::string"
    },
    {
      "args": ["std::string"],
      "ret": "std::string"
    }
  ],
  "/panopticon/canvas/lockRavelsInSelection": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/canvas/model": [
    {
      "args": [],
      "ret": "::minsky::Canvas::Model"
    },
    {
      "args": ["::minsky::Canvas::Model"],
      "ret": "::minsky::Canvas::Model"
    }
  ],
  "/panopticon/canvas/model/parent": [
    {
      "args": [],
      "ret": "::minsky::Group"
    },
    {
      "args": ["::minsky::Group"],
      "ret": "::minsky::Group"
    }
  ],
  "/panopticon/canvas/model/px": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/panopticon/canvas/model/py": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/panopticon/canvas/model/pz": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/panopticon/canvas/model/updateTimestamp": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/canvas/model/zoom": {
    "args": ["double", "double", "double"],
    "ret": "void"
  },
  "/panopticon/canvas/mouseDown": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/panopticon/canvas/mouseMove": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/panopticon/canvas/mouseUp": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/panopticon/canvas/moveOffsX": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/panopticon/canvas/moveOffsY": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/panopticon/canvas/openGroupInCanvas": {
    "args": ["const classdesc::shared_ptr<::minsky::Item>&"],
    "ret": "void"
  },
  "/panopticon/canvas/pushDefiningVarsToTab": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/canvas/recentre": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/canvas/redraw": [
    {
      "args": ["int", "int", "int", "int"],
      "ret": "bool"
    },
    {
      "args": ["int", "int", "int", "int"],
      "ret": "bool"
    },
    {
      "args": [],
      "ret": "bool"
    }
  ],
  "/panopticon/canvas/redrawAll": [
    {
      "args": [],
      "ret": "bool"
    },
    {
      "args": ["bool"],
      "ret": "bool"
    }
  ],
  "/panopticon/canvas/redrawRequested": {
    "args": [],
    "ret": "bool"
  },
  "/panopticon/canvas/redrawUpdateRegion": {
    "args": [],
    "ret": "bool"
  },
  "/panopticon/canvas/redrawWithBounds": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/canvas/registerImage": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/canvas/removeItemFromItsGroup": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/canvas/renameAllInstances": {
    "args": ["std::string"],
    "ret": "void"
  },
  "/panopticon/canvas/renameItem": {
    "args": ["std::string"],
    "ret": "void"
  },
  "/panopticon/canvas/renderFrame": {
    "args": ["unsigned long", "int", "int", "int", "int"],
    "ret": "void"
  },
  "/panopticon/canvas/renderToEMF": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/panopticon/canvas/renderToPDF": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/panopticon/canvas/renderToPNG": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/panopticon/canvas/renderToPS": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/panopticon/canvas/renderToSVG": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/panopticon/canvas/reportDrawTime": {
    "args": ["double"],
    "ret": "void"
  },
  "/panopticon/canvas/requestRedraw": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/canvas/resizeWindow": {
    "args": ["int", "int", "int", "int"],
    "ret": "void"
  },
  "/panopticon/canvas/resolutionScaleFactor": [
    {
      "args": [],
      "ret": "double"
    },
    {
      "args": ["double"],
      "ret": "double"
    }
  ],
  "/panopticon/canvas/select": [
    {
      "args": ["float", "float", "float", "float"],
      "ret": "void"
    },
    {
      "args": ["const ::minsky::LassoBox&"],
      "ret": "void"
    }
  ],
  "/panopticon/canvas/selectAllVariables": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/canvas/selectVar": {
    "args": ["float", "float"],
    "ret": "bool"
  },
  "/panopticon/canvas/selection": [
    {
      "args": [],
      "ret": "::minsky::Selection"
    },
    {
      "args": ["::minsky::Selection"],
      "ret": "::minsky::Selection"
    }
  ],
  "/panopticon/canvas/selection/RESTProcess": [
    {
      "args": ["::classdesc::RESTProcess_t&", "const std::string&"],
      "ret": "void"
    },
    {
      "args": ["::classdesc::RESTProcess_t&", "const std::string&"],
      "ret": "void"
    },
    {
      "args": ["::classdesc::RESTProcess_t&", "const std::string&"],
      "ret": "void"
    },
    {
      "args": ["::classdesc::RESTProcess_t&", "const std::string&"],
      "ret": "void"
    },
    {
      "args": ["::classdesc::RESTProcess_t&", "const std::string&"],
      "ret": "void"
    },
    {
      "args": ["::classdesc::RESTProcess_t&", "const std::string&"],
      "ret": "void"
    }
  ],
  "/panopticon/canvas/selection/TCL_obj": [
    {
      "args": ["::classdesc::TCL_obj_t&", "const std::string&"],
      "ret": "void"
    },
    {
      "args": ["::classdesc::TCL_obj_t&", "const std::string&"],
      "ret": "void"
    }
  ],
  "/panopticon/canvas/selection/accessibleVars": {
    "args": [],
    "ret": "std::vector<std::string>"
  },
  "/panopticon/canvas/selection/addBookmark": {
    "args": ["const std::string&"],
    "ret": "void"
  },
  "/panopticon/canvas/selection/addGroup": [
    {
      "args": ["const classdesc::shared_ptr<::minsky::Group>&"],
      "ret": "classdesc::shared_ptr<::minsky::Group>"
    },
    {
      "args": ["::minsky::Group*"],
      "ret": "classdesc::shared_ptr<::minsky::Group>"
    }
  ],
  "/panopticon/canvas/selection/addInputVar": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/canvas/selection/addItem": [
    {
      "args": ["::minsky::Item*"],
      "ret": "classdesc::shared_ptr<::minsky::Item>"
    },
    {
      "args": ["const classdesc::shared_ptr<::minsky::Item>&", "bool"],
      "ret": "classdesc::shared_ptr<::minsky::Item>"
    },
    {
      "args": ["const classdesc::shared_ptr<::minsky::Item>&", "bool"],
      "ret": "classdesc::shared_ptr<::minsky::Item>"
    },
    {
      "args": ["::minsky::Item*"],
      "ret": "classdesc::shared_ptr<::minsky::Item>"
    }
  ],
  "/panopticon/canvas/selection/addOutputVar": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/canvas/selection/addWire": [
    {
      "args": ["const classdesc::shared_ptr<::minsky::Wire>&"],
      "ret": "classdesc::shared_ptr<::minsky::Wire>"
    },
    {
      "args": ["::minsky::Wire*"],
      "ret": "classdesc::shared_ptr<::minsky::Wire>"
    },
    {
      "args": [
        "const ::minsky::Item&",
        "const ::minsky::Item&",
        "unsigned int",
        "const std::vector<float>&"
      ],
      "ret": "classdesc::shared_ptr<::minsky::Wire>"
    },
    {
      "args": [
        "const std::weak_ptr<::minsky::Port>&",
        "const std::weak_ptr<::minsky::Port>&",
        "const std::vector<float>&"
      ],
      "ret": "classdesc::shared_ptr<::minsky::Wire>"
    }
  ],
  "/panopticon/canvas/selection/adjustWiresGroup": {
    "args": ["::minsky::Wire&"],
    "ret": "void"
  },
  "/panopticon/canvas/selection/arguments": {
    "args": [],
    "ret": "std::string"
  },
  "/panopticon/canvas/selection/attachedToDefiningVar": {
    "args": [],
    "ret": "bool"
  },
  "/panopticon/canvas/selection/autoLayout": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/canvas/selection/bb": [
    {
      "args": [],
      "ret": "::minsky::BoundingBox"
    },
    {
      "args": ["::minsky::BoundingBox"],
      "ret": "::minsky::BoundingBox"
    }
  ],
  "/panopticon/canvas/selection/bb/bottom": {
    "args": [],
    "ret": "float"
  },
  "/panopticon/canvas/selection/bb/contains": {
    "args": ["float", "float"],
    "ret": "bool"
  },
  "/panopticon/canvas/selection/bb/height": {
    "args": [],
    "ret": "float"
  },
  "/panopticon/canvas/selection/bb/left": {
    "args": [],
    "ret": "float"
  },
  "/panopticon/canvas/selection/bb/right": {
    "args": [],
    "ret": "float"
  },
  "/panopticon/canvas/selection/bb/top": {
    "args": [],
    "ret": "float"
  },
  "/panopticon/canvas/selection/bb/update": {
    "args": ["const ::minsky::Item&"],
    "ret": "void"
  },
  "/panopticon/canvas/selection/bb/valid": {
    "args": [],
    "ret": "bool"
  },
  "/panopticon/canvas/selection/bb/width": {
    "args": [],
    "ret": "float"
  },
  "/panopticon/canvas/selection/bookmarkList": {
    "args": [],
    "ret": "std::vector<std::string>"
  },
  "/panopticon/canvas/selection/bookmarks": [
    {
      "args": [],
      "ret": "std::vector<::minsky::Bookmark>"
    },
    {
      "args": ["std::vector<::minsky::Bookmark>"],
      "ret": "std::vector<::minsky::Bookmark>"
    }
  ],
  "/panopticon/canvas/selection/bottom": {
    "args": [],
    "ret": "float"
  },
  "/panopticon/canvas/selection/cBounds": {
    "args": [],
    "ret": "ecolab::array<double>"
  },
  "/panopticon/canvas/selection/checkAddIORegion": {
    "args": ["const classdesc::shared_ptr<::minsky::Item>&"],
    "ret": "void"
  },
  "/panopticon/canvas/selection/checkUnits": {
    "args": [],
    "ret": "::minsky::Units"
  },
  "/panopticon/canvas/selection/classType": [
    {
      "args": [],
      "ret": "std::string"
    },
    {
      "args": [],
      "ret": "std::string"
    }
  ],
  "/panopticon/canvas/selection/clear": [
    {
      "args": [],
      "ret": "void"
    },
    {
      "args": [],
      "ret": "void"
    }
  ],
  "/panopticon/canvas/selection/clickType": [
    {
      "args": ["float", "float"],
      "ret": "::minsky::ClickType::Type"
    },
    {
      "args": ["float", "float"],
      "ret": "::minsky::ClickType::Type"
    }
  ],
  "/panopticon/canvas/selection/clone": [
    {
      "args": [],
      "ret": "::minsky::Item*"
    },
    {
      "args": [],
      "ret": "::minsky::ItemT< ::minsky::Group , ::minsky::Item > *"
    },
    {
      "args": [],
      "ret": "::minsky::Group*"
    }
  ],
  "/panopticon/canvas/selection/closestInPort": {
    "args": ["float", "float"],
    "ret": "classdesc::shared_ptr<::minsky::Port>"
  },
  "/panopticon/canvas/selection/closestOutPort": {
    "args": ["float", "float"],
    "ret": "classdesc::shared_ptr<::minsky::Port>"
  },
  "/panopticon/canvas/selection/computeDisplayZoom": {
    "args": [],
    "ret": "float"
  },
  "/panopticon/canvas/selection/computeRelZoom": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/canvas/selection/contains": [
    {
      "args": ["float", "float"],
      "ret": "bool"
    },
    {
      "args": ["const classdesc::shared_ptr<::minsky::Item>&"],
      "ret": "bool"
    }
  ],
  "/panopticon/canvas/selection/contentBounds": {
    "args": ["double&", "double&", "double&", "double&"],
    "ret": "float"
  },
  "/panopticon/canvas/selection/copy": {
    "args": [],
    "ret": "classdesc::shared_ptr<::minsky::Group>"
  },
  "/panopticon/canvas/selection/copyUnowned": {
    "args": [],
    "ret": "classdesc::shared_ptr<::minsky::Group>"
  },
  "/panopticon/canvas/selection/corners": {
    "args": [],
    "ret": "std::vector<boost::geometry::model::d2::point_xy<T,S>>"
  },
  "/panopticon/canvas/selection/createdIOvariables": [
    {
      "args": [],
      "ret": "std::vector<::minsky::VariablePtr>"
    },
    {
      "args": ["std::vector<::minsky::VariablePtr>"],
      "ret": "std::vector<::minsky::VariablePtr>"
    }
  ],
  "/panopticon/canvas/selection/defaultExtension": {
    "args": [],
    "ret": "std::string"
  },
  "/panopticon/canvas/selection/deleteAttachedWires": [
    {
      "args": [],
      "ret": "void"
    },
    {
      "args": [],
      "ret": "void"
    }
  ],
  "/panopticon/canvas/selection/deleteBookmark": {
    "args": ["unsigned long"],
    "ret": "void"
  },
  "/panopticon/canvas/selection/deleteCallback": [
    {
      "args": [],
      "ret": "std::string"
    },
    {
      "args": ["std::string"],
      "ret": "std::string"
    }
  ],
  "/panopticon/canvas/selection/deleteItem": {
    "args": ["const ::minsky::Item&"],
    "ret": "void"
  },
  "/panopticon/canvas/selection/detailedText": [
    {
      "args": [],
      "ret": "std::string"
    },
    {
      "args": ["std::string"],
      "ret": "std::string"
    }
  ],
  "/panopticon/canvas/selection/disableDelayedTooltip": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/canvas/selection/displayContents": {
    "args": [],
    "ret": "bool"
  },
  "/panopticon/canvas/selection/displayContentsChanged": {
    "args": [],
    "ret": "bool"
  },
  "/panopticon/canvas/selection/displayDelayedTooltip": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/panopticon/canvas/selection/displayPlot": [
    {
      "args": [],
      "ret": "::minsky::PlotWidget"
    },
    {
      "args": ["::minsky::PlotWidget"],
      "ret": "::minsky::PlotWidget"
    }
  ],
  "/panopticon/canvas/selection/displayTooltip": {
    "args": ["cairo_t*", "const std::string&"],
    "ret": "void"
  },
  "/panopticon/canvas/selection/displayZoom": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/panopticon/canvas/selection/draw": [
    {
      "args": ["cairo_t*"],
      "ret": "void"
    },
    {
      "args": ["cairo_t*"],
      "ret": "void"
    }
  ],
  "/panopticon/canvas/selection/draw1edge": {
    "args": ["const std::vector<::minsky::VariablePtr>&", "cairo_t*", "float"],
    "ret": "void"
  },
  "/panopticon/canvas/selection/drawEdgeVariables": {
    "args": ["cairo_t*"],
    "ret": "void"
  },
  "/panopticon/canvas/selection/drawIORegion": {
    "args": ["cairo_t*"],
    "ret": "void"
  },
  "/panopticon/canvas/selection/drawPorts": {
    "args": ["cairo_t*"],
    "ret": "void"
  },
  "/panopticon/canvas/selection/drawResizeHandles": {
    "args": ["cairo_t*"],
    "ret": "void"
  },
  "/panopticon/canvas/selection/drawSelected": {
    "args": ["cairo_t*"],
    "ret": "void"
  },
  "/panopticon/canvas/selection/dummyDraw": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/canvas/selection/edgeScale": {
    "args": [],
    "ret": "float"
  },
  "/panopticon/canvas/selection/empty": {
    "args": [],
    "ret": "bool"
  },
  "/panopticon/canvas/selection/ensureBBValid": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/canvas/selection/ensureGroupInserted": {
    "args": ["const classdesc::shared_ptr<::minsky::Group>&"],
    "ret": "void"
  },
  "/panopticon/canvas/selection/ensureItemInserted": {
    "args": ["const classdesc::shared_ptr<::minsky::Item>&"],
    "ret": "void"
  },
  "/panopticon/canvas/selection/findGroup": {
    "args": ["const ::minsky::Group&"],
    "ret": "classdesc::shared_ptr<::minsky::Group>"
  },
  "/panopticon/canvas/selection/findItem": {
    "args": ["const ::minsky::Item&"],
    "ret": "classdesc::shared_ptr<::minsky::Item>"
  },
  "/panopticon/canvas/selection/findWire": {
    "args": ["const ::minsky::Wire&"],
    "ret": "classdesc::shared_ptr<::minsky::Wire>"
  },
  "/panopticon/canvas/selection/flip": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/canvas/selection/flipContents": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/canvas/selection/formula": {
    "args": [],
    "ret": "std::string"
  },
  "/panopticon/canvas/selection/globalGroup": [
    {
      "args": [],
      "ret": "const ::minsky::Group&"
    },
    {
      "args": [],
      "ret": "::minsky::Group&"
    }
  ],
  "/panopticon/canvas/selection/gotoBookmark": {
    "args": ["unsigned long"],
    "ret": "void"
  },
  "/panopticon/canvas/selection/gotoBookmark_b": {
    "args": ["const ::minsky::Bookmark&"],
    "ret": "void"
  },
  "/panopticon/canvas/selection/groups": [
    {
      "args": [],
      "ret": "std::vector<classdesc::shared_ptr<::minsky::Group>>"
    },
    {
      "args": ["std::vector<classdesc::shared_ptr<::minsky::Group>>"],
      "ret": "std::vector<classdesc::shared_ptr<::minsky::Group>>"
    }
  ],
  "/panopticon/canvas/selection/height": {
    "args": [],
    "ret": "float"
  },
  "/panopticon/canvas/selection/higher": {
    "args": ["const ::minsky::Group&"],
    "ret": "bool"
  },
  "/panopticon/canvas/selection/iHeight": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["const float&"],
      "ret": "float"
    }
  ],
  "/panopticon/canvas/selection/iWidth": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["const float&"],
      "ret": "float"
    }
  ],
  "/panopticon/canvas/selection/inIORegion": {
    "args": ["float", "float"],
    "ret": "::minsky::Group::IORegion::type"
  },
  "/panopticon/canvas/selection/inItem": {
    "args": ["float", "float"],
    "ret": "bool"
  },
  "/panopticon/canvas/selection/inVariables": [
    {
      "args": [],
      "ret": "std::vector<::minsky::VariablePtr>"
    },
    {
      "args": ["std::vector<::minsky::VariablePtr>"],
      "ret": "std::vector<::minsky::VariablePtr>"
    }
  ],
  "/panopticon/canvas/selection/insertControlled": {
    "args": ["::minsky::Selection&"],
    "ret": "void"
  },
  "/panopticon/canvas/selection/insertGroup": {
    "args": ["const classdesc::shared_ptr<::minsky::Group>&"],
    "ret": "void"
  },
  "/panopticon/canvas/selection/insertItem": {
    "args": ["const classdesc::shared_ptr<::minsky::Item>&"],
    "ret": "void"
  },
  "/panopticon/canvas/selection/ioVar": {
    "args": [],
    "ret": "bool"
  },
  "/panopticon/canvas/selection/itemPtrFromThis": {
    "args": [],
    "ret": "classdesc::shared_ptr<::minsky::Item>"
  },
  "/panopticon/canvas/selection/itemTabX": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/panopticon/canvas/selection/itemTabY": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/panopticon/canvas/selection/items": [
    {
      "args": [],
      "ret": "std::vector<classdesc::shared_ptr<::minsky::Item>>"
    },
    {
      "args": ["std::vector<classdesc::shared_ptr<::minsky::Item>>"],
      "ret": "std::vector<classdesc::shared_ptr<::minsky::Item>>"
    }
  ],
  "/panopticon/canvas/selection/json_pack": [
    {
      "args": ["classdesc::json_pack_t&"],
      "ret": "void"
    },
    {
      "args": ["classdesc::json_pack_t&"],
      "ret": "void"
    }
  ],
  "/panopticon/canvas/selection/left": {
    "args": [],
    "ret": "float"
  },
  "/panopticon/canvas/selection/level": {
    "args": [],
    "ret": "unsigned int"
  },
  "/panopticon/canvas/selection/localZoom": {
    "args": [],
    "ret": "float"
  },
  "/panopticon/canvas/selection/m_sf": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/panopticon/canvas/selection/m_x": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/panopticon/canvas/selection/m_y": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/panopticon/canvas/selection/margins": {
    "args": ["float&", "float&"],
    "ret": "void"
  },
  "/panopticon/canvas/selection/marginsV": {
    "args": [],
    "ret": "std::vector<float>"
  },
  "/panopticon/canvas/selection/minimalEnclosingGroup": [
    {
      "args": ["float", "float", "float", "float", "const ::minsky::Item*"],
      "ret": "const ::minsky::Group*"
    },
    {
      "args": ["float", "float", "float", "float", "const ::minsky::Item*"],
      "ret": "::minsky::Group*"
    }
  ],
  "/panopticon/canvas/selection/mouseFocus": [
    {
      "args": [],
      "ret": "bool"
    },
    {
      "args": ["bool"],
      "ret": "bool"
    }
  ],
  "/panopticon/canvas/selection/moveContents": {
    "args": ["::minsky::Group&"],
    "ret": "void"
  },
  "/panopticon/canvas/selection/moveTo": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/panopticon/canvas/selection/name": [
    {
      "args": [],
      "ret": "std::string"
    },
    {
      "args": [],
      "ret": "std::string"
    }
  ],
  "/panopticon/canvas/selection/nocycles": [
    {
      "args": [],
      "ret": "bool"
    },
    {
      "args": [],
      "ret": "bool"
    }
  ],
  "/panopticon/canvas/selection/normaliseGroupRefs": {
    "args": ["const classdesc::shared_ptr<::minsky::Group>&"],
    "ret": "void"
  },
  "/panopticon/canvas/selection/numGroups": {
    "args": [],
    "ret": "unsigned long"
  },
  "/panopticon/canvas/selection/numItems": {
    "args": [],
    "ret": "unsigned long"
  },
  "/panopticon/canvas/selection/numWires": {
    "args": [],
    "ret": "unsigned long"
  },
  "/panopticon/canvas/selection/onBorder": [
    {
      "args": [],
      "ret": "bool"
    },
    {
      "args": ["bool"],
      "ret": "bool"
    }
  ],
  "/panopticon/canvas/selection/onKeyPress": {
    "args": ["int", "const std::string&", "int"],
    "ret": "bool"
  },
  "/panopticon/canvas/selection/onMouseDown": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/panopticon/canvas/selection/onMouseLeave": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/canvas/selection/onMouseMotion": {
    "args": ["float", "float"],
    "ret": "bool"
  },
  "/panopticon/canvas/selection/onMouseOver": {
    "args": ["float", "float"],
    "ret": "bool"
  },
  "/panopticon/canvas/selection/onMouseUp": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/panopticon/canvas/selection/onResizeHandle": {
    "args": ["float", "float"],
    "ret": "bool"
  },
  "/panopticon/canvas/selection/onResizeHandles": [
    {
      "args": [],
      "ret": "bool"
    },
    {
      "args": ["bool"],
      "ret": "bool"
    }
  ],
  "/panopticon/canvas/selection/operationCast": [
    {
      "args": [],
      "ret": "const ::minsky::OperationBase*"
    },
    {
      "args": [],
      "ret": "::minsky::OperationBase*"
    }
  ],
  "/panopticon/canvas/selection/outVariables": [
    {
      "args": [],
      "ret": "std::vector<::minsky::VariablePtr>"
    },
    {
      "args": ["std::vector<::minsky::VariablePtr>"],
      "ret": "std::vector<::minsky::VariablePtr>"
    }
  ],
  "/panopticon/canvas/selection/plotWidgetCast": [
    {
      "args": [],
      "ret": "const ::minsky::PlotWidget*"
    },
    {
      "args": [],
      "ret": "::minsky::PlotWidget*"
    }
  ],
  "/panopticon/canvas/selection/portX": {
    "args": ["unsigned long"],
    "ret": "float"
  },
  "/panopticon/canvas/selection/portY": {
    "args": ["unsigned long"],
    "ret": "float"
  },
  "/panopticon/canvas/selection/ports": {
    "args": ["unsigned long"],
    "ret": "std::weak_ptr<::minsky::Port>"
  },
  "/panopticon/canvas/selection/portsSize": {
    "args": [],
    "ret": "unsigned long"
  },
  "/panopticon/canvas/selection/randomLayout": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/canvas/selection/relZoom": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/panopticon/canvas/selection/removeControlledItems": [
    {
      "args": ["::minsky::Group&"],
      "ret": "void"
    },
    {
      "args": [],
      "ret": "void"
    }
  ],
  "/panopticon/canvas/selection/removeDisplayPlot": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/canvas/selection/removeGroup": {
    "args": ["const ::minsky::Group&"],
    "ret": "classdesc::shared_ptr<::minsky::Group>"
  },
  "/panopticon/canvas/selection/removeItem": {
    "args": ["const ::minsky::Item&"],
    "ret": "classdesc::shared_ptr<::minsky::Item>"
  },
  "/panopticon/canvas/selection/removeWire": {
    "args": ["const ::minsky::Wire&"],
    "ret": "classdesc::shared_ptr<::minsky::Wire>"
  },
  "/panopticon/canvas/selection/resize": [
    {
      "args": ["const ::minsky::LassoBox&"],
      "ret": "void"
    },
    {
      "args": ["const ::minsky::LassoBox&"],
      "ret": "void"
    }
  ],
  "/panopticon/canvas/selection/resizeHandleSize": {
    "args": [],
    "ret": "float"
  },
  "/panopticon/canvas/selection/resizeOnContents": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/canvas/selection/right": {
    "args": [],
    "ret": "float"
  },
  "/panopticon/canvas/selection/rotFactor": {
    "args": [],
    "ret": "float"
  },
  "/panopticon/canvas/selection/rotation": [
    {
      "args": [],
      "ret": "double"
    },
    {
      "args": ["const double&"],
      "ret": "double"
    }
  ],
  "/panopticon/canvas/selection/scaleFactor": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["const float&"],
      "ret": "float"
    }
  ],
  "/panopticon/canvas/selection/select": [
    {
      "args": ["float", "float"],
      "ret": "classdesc::shared_ptr<::minsky::Item>"
    },
    {
      "args": ["float", "float"],
      "ret": "classdesc::shared_ptr<::minsky::Item>"
    }
  ],
  "/panopticon/canvas/selection/selected": [
    {
      "args": [],
      "ret": "bool"
    },
    {
      "args": ["bool"],
      "ret": "bool"
    }
  ],
  "/panopticon/canvas/selection/setZoom": {
    "args": ["float"],
    "ret": "void"
  },
  "/panopticon/canvas/selection/splitBoundaryCrossingWires": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/canvas/selection/svgRenderer": [
    {
      "args": [],
      "ret": "::minsky::SVGRenderer"
    },
    {
      "args": ["::minsky::SVGRenderer"],
      "ret": "::minsky::SVGRenderer"
    }
  ],
  "/panopticon/canvas/selection/svgRenderer/height": {
    "args": [],
    "ret": "double"
  },
  "/panopticon/canvas/selection/svgRenderer/render": {
    "args": ["cairo_t*"],
    "ret": "void"
  },
  "/panopticon/canvas/selection/svgRenderer/setResource": {
    "args": ["const std::string&"],
    "ret": "void"
  },
  "/panopticon/canvas/selection/svgRenderer/width": {
    "args": [],
    "ret": "double"
  },
  "/panopticon/canvas/selection/switchIconCast": [
    {
      "args": [],
      "ret": "const ::minsky::SwitchIcon*"
    },
    {
      "args": [],
      "ret": "::minsky::SwitchIcon*"
    }
  ],
  "/panopticon/canvas/selection/throw_error": {
    "args": ["const std::string&"],
    "ret": "void"
  },
  "/panopticon/canvas/selection/title": [
    {
      "args": [],
      "ret": "std::string"
    },
    {
      "args": ["std::string"],
      "ret": "std::string"
    }
  ],
  "/panopticon/canvas/selection/toggleItemMembership": {
    "args": ["const classdesc::shared_ptr<::minsky::Item>&"],
    "ret": "void"
  },
  "/panopticon/canvas/selection/tooltip": [
    {
      "args": [],
      "ret": "std::string"
    },
    {
      "args": ["std::string"],
      "ret": "std::string"
    }
  ],
  "/panopticon/canvas/selection/top": {
    "args": [],
    "ret": "float"
  },
  "/panopticon/canvas/selection/uniqueItems": [
    {
      "args": ["std::set<void*>&"],
      "ret": "bool"
    },
    {
      "args": [],
      "ret": "bool"
    }
  ],
  "/panopticon/canvas/selection/units": {
    "args": ["bool"],
    "ret": "::minsky::Units"
  },
  "/panopticon/canvas/selection/updateBoundingBox": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/canvas/selection/updateIcon": {
    "args": ["double"],
    "ret": "void"
  },
  "/panopticon/canvas/selection/value": {
    "args": [],
    "ret": "double"
  },
  "/panopticon/canvas/selection/variableCast": [
    {
      "args": [],
      "ret": "const ::minsky::VariableBase*"
    },
    {
      "args": [],
      "ret": "::minsky::VariableBase*"
    }
  ],
  "/panopticon/canvas/selection/visible": {
    "args": [],
    "ret": "bool"
  },
  "/panopticon/canvas/selection/width": {
    "args": [],
    "ret": "float"
  },
  "/panopticon/canvas/selection/wires": [
    {
      "args": [],
      "ret": "std::vector<classdesc::shared_ptr<::minsky::Wire>>"
    },
    {
      "args": ["std::vector<classdesc::shared_ptr<::minsky::Wire>>"],
      "ret": "std::vector<classdesc::shared_ptr<::minsky::Wire>>"
    }
  ],
  "/panopticon/canvas/selection/x": {
    "args": [],
    "ret": "float"
  },
  "/panopticon/canvas/selection/y": {
    "args": [],
    "ret": "float"
  },
  "/panopticon/canvas/selection/zoom": {
    "args": ["float", "float", "float"],
    "ret": "void"
  },
  "/panopticon/canvas/selection/zoomFactor": {
    "args": [],
    "ret": "float"
  },
  "/panopticon/canvas/setItemFocus": {
    "args": ["const classdesc::shared_ptr<::minsky::Item>&"],
    "ret": "void"
  },
  "/panopticon/canvas/showDefiningVarsOnCanvas": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/canvas/showPlotsOnTab": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/canvas/surface": {
    "args": [],
    "ret": "classdesc::shared_ptr<ecolab::cairo::Surface>&"
  },
  "/panopticon/canvas/termX": [
    {
      "args": [],
      "ret": "double"
    },
    {
      "args": ["double"],
      "ret": "double"
    }
  ],
  "/panopticon/canvas/termY": [
    {
      "args": [],
      "ret": "double"
    },
    {
      "args": ["double"],
      "ret": "double"
    }
  ],
  "/panopticon/canvas/ungroupItem": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/canvas/unlockRavelsInSelection": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/canvas/updateRegion": [
    {
      "args": [],
      "ret": "::minsky::LassoBox"
    },
    {
      "args": ["::minsky::LassoBox"],
      "ret": "::minsky::LassoBox"
    }
  ],
  "/panopticon/canvas/updateRegion/angle": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/panopticon/canvas/updateRegion/contains": {
    "args": ["const ::minsky::Wire&"],
    "ret": "bool"
  },
  "/panopticon/canvas/updateRegion/x0": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/panopticon/canvas/updateRegion/x1": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/panopticon/canvas/updateRegion/y0": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/panopticon/canvas/updateRegion/y1": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/panopticon/canvas/vectorRender": {
    "args": ["const char*", "<function>*"],
    "ret": "classdesc::shared_ptr<ecolab::cairo::Surface>"
  },
  "/panopticon/canvas/wire": [
    {
      "args": [],
      "ret": "::minsky::Wire"
    },
    {
      "args": ["::minsky::Wire"],
      "ret": "::minsky::Wire"
    }
  ],
  "/panopticon/canvas/wireFocus": [
    {
      "args": [],
      "ret": "::minsky::Wire"
    },
    {
      "args": ["::minsky::Wire"],
      "ret": "::minsky::Wire"
    }
  ],
  "/panopticon/canvas/zoomToDisplay": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/cheight": [
    {
      "args": [],
      "ret": "double"
    },
    {
      "args": ["double"],
      "ret": "double"
    }
  ],
  "/panopticon/cleft": [
    {
      "args": [],
      "ret": "double"
    },
    {
      "args": ["double"],
      "ret": "double"
    }
  ],
  "/panopticon/ctop": [
    {
      "args": [],
      "ret": "double"
    },
    {
      "args": ["double"],
      "ret": "double"
    }
  ],
  "/panopticon/cwidth": [
    {
      "args": [],
      "ret": "double"
    },
    {
      "args": ["double"],
      "ret": "double"
    }
  ],
  "/panopticon/draw": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/height": [
    {
      "args": [],
      "ret": "double"
    },
    {
      "args": ["double"],
      "ret": "double"
    }
  ],
  "/panopticon/redraw": [
    {
      "args": ["int", "int", "int", "int"],
      "ret": "bool"
    },
    {
      "args": ["int", "int", "int", "int"],
      "ret": "bool"
    }
  ],
  "/panopticon/redrawWithBounds": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/registerImage": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/renderFrame": {
    "args": ["unsigned long", "int", "int", "int", "int"],
    "ret": "void"
  },
  "/panopticon/renderToEMF": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/panopticon/renderToPDF": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/panopticon/renderToPNG": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/panopticon/renderToPS": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/panopticon/renderToSVG": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/panopticon/reportDrawTime": {
    "args": ["double"],
    "ret": "void"
  },
  "/panopticon/requestRedraw": {
    "args": [],
    "ret": "void"
  },
  "/panopticon/resizeWindow": {
    "args": ["int", "int", "int", "int"],
    "ret": "void"
  },
  "/panopticon/resolutionScaleFactor": [
    {
      "args": [],
      "ret": "double"
    },
    {
      "args": ["double"],
      "ret": "double"
    }
  ],
  "/panopticon/vectorRender": {
    "args": ["const char*", "<function>*"],
    "ret": "classdesc::shared_ptr<ecolab::cairo::Surface>"
  },
  "/panopticon/width": [
    {
      "args": [],
      "ret": "double"
    },
    {
      "args": ["double"],
      "ret": "double"
    }
  ],
  "/parameterTab": [
    {
      "args": [],
      "ret": "::minsky::ParameterTab"
    },
    {
      "args": ["::minsky::ParameterTab"],
      "ret": "::minsky::ParameterTab"
    }
  ],
  "/parameterTab/bottomRowMargin": [
    {
      "args": [],
      "ret": "std::vector<double>"
    },
    {
      "args": ["std::vector<double>"],
      "ret": "std::vector<double>"
    }
  ],
  "/parameterTab/cell": [
    {
      "args": ["unsigned int", "unsigned int"],
      "ret": "::ecolab::Pango&"
    },
    {
      "args": ["unsigned int", "unsigned int"],
      "ret": "::ecolab::Pango&"
    },
    {
      "args": ["unsigned int", "unsigned int"],
      "ret": "::ecolab::Pango&"
    }
  ],
  "/parameterTab/clickType": {
    "args": ["double", "double"],
    "ret": "::minsky::ItemTab::ClickType"
  },
  "/parameterTab/colX": {
    "args": ["double"],
    "ret": "int"
  },
  "/parameterTab/displayDelayedTooltip": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/parameterTab/draw": [
    {
      "args": [],
      "ret": "void"
    },
    {
      "args": [],
      "ret": "void"
    },
    {
      "args": ["cairo_t*"],
      "ret": "void"
    }
  ],
  "/parameterTab/evenHeight": {
    "args": [],
    "ret": "bool"
  },
  "/parameterTab/getItemAt": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/parameterTab/getVarName": {
    "args": ["int"],
    "ret": "std::string"
  },
  "/parameterTab/height": {
    "args": [],
    "ret": "float"
  },
  "/parameterTab/item": [
    {
      "args": [],
      "ret": "::minsky::Item"
    },
    {
      "args": ["::minsky::Item"],
      "ret": "::minsky::Item"
    }
  ],
  "/parameterTab/itemAt": {
    "args": ["float", "float"],
    "ret": "classdesc::shared_ptr<::minsky::Item>"
  },
  "/parameterTab/itemFocus": [
    {
      "args": [],
      "ret": "::minsky::Item"
    },
    {
      "args": ["::minsky::Item"],
      "ret": "::minsky::Item"
    }
  ],
  "/parameterTab/itemSelector": [
    {
      "args": ["const classdesc::shared_ptr<::minsky::Item>&"],
      "ret": "bool"
    },
    {
      "args": ["const classdesc::shared_ptr<::minsky::Item>&"],
      "ret": "bool"
    }
  ],
  "/parameterTab/itemVector": [
    {
      "args": [],
      "ret": "std::vector<classdesc::shared_ptr<::minsky::Item>>"
    },
    {
      "args": ["std::vector<classdesc::shared_ptr<::minsky::Item>>"],
      "ret": "std::vector<classdesc::shared_ptr<::minsky::Item>>"
    }
  ],
  "/parameterTab/justification": {
    "args": ["unsigned int"],
    "ret": "::minsky::JustificationStruct::Justification"
  },
  "/parameterTab/m_height": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/parameterTab/m_width": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/parameterTab/mouseDownCommon": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/parameterTab/mouseMove": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/parameterTab/mouseUp": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/parameterTab/moveItemTo": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/parameterTab/moveOffsX": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/parameterTab/moveOffsY": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/parameterTab/moveTo": {
    "args": ["double", "double"],
    "ret": "void"
  },
  "/parameterTab/numCols": [
    {
      "args": [],
      "ret": "unsigned int"
    },
    {
      "args": [],
      "ret": "unsigned int"
    }
  ],
  "/parameterTab/numRows": [
    {
      "args": [],
      "ret": "unsigned int"
    },
    {
      "args": [],
      "ret": "unsigned int"
    }
  ],
  "/parameterTab/offsx": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/parameterTab/offsy": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/parameterTab/populateItemVector": {
    "args": [],
    "ret": "void"
  },
  "/parameterTab/redraw": [
    {
      "args": ["int", "int", "int", "int"],
      "ret": "bool"
    },
    {
      "args": ["int", "int", "int", "int"],
      "ret": "bool"
    }
  ],
  "/parameterTab/redrawWithBounds": {
    "args": [],
    "ret": "void"
  },
  "/parameterTab/registerImage": {
    "args": [],
    "ret": "void"
  },
  "/parameterTab/renderFrame": {
    "args": ["unsigned long", "int", "int", "int", "int"],
    "ret": "void"
  },
  "/parameterTab/renderToEMF": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/parameterTab/renderToPDF": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/parameterTab/renderToPNG": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/parameterTab/renderToPS": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/parameterTab/renderToSVG": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/parameterTab/reportDrawTime": {
    "args": ["double"],
    "ret": "void"
  },
  "/parameterTab/requestRedraw": {
    "args": [],
    "ret": "void"
  },
  "/parameterTab/resizeWindow": {
    "args": ["int", "int", "int", "int"],
    "ret": "void"
  },
  "/parameterTab/resolutionScaleFactor": [
    {
      "args": [],
      "ret": "double"
    },
    {
      "args": ["double"],
      "ret": "double"
    }
  ],
  "/parameterTab/rightColMargin": [
    {
      "args": [],
      "ret": "std::vector<double>"
    },
    {
      "args": ["std::vector<double>"],
      "ret": "std::vector<double>"
    }
  ],
  "/parameterTab/rowY": {
    "args": ["double"],
    "ret": "int"
  },
  "/parameterTab/toggleVarDisplay": {
    "args": ["int"],
    "ret": "void"
  },
  "/parameterTab/varAttrib": [
    {
      "args": [],
      "ret": "std::vector<std::string>"
    },
    {
      "args": ["std::vector<std::string>"],
      "ret": "std::vector<std::string>"
    }
  ],
  "/parameterTab/vectorRender": {
    "args": ["const char*", "<function>*"],
    "ret": "classdesc::shared_ptr<ecolab::cairo::Surface>"
  },
  "/parameterTab/width": {
    "args": [],
    "ret": "float"
  },
  "/parameterTab/xItem": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/parameterTab/xoffs": [
    {
      "args": [],
      "ret": "double"
    },
    {
      "args": ["double"],
      "ret": "double"
    }
  ],
  "/parameterTab/yItem": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/paste": {
    "args": [],
    "ret": "void"
  },
  "/plotTab": [
    {
      "args": [],
      "ret": "::minsky::PlotTab"
    },
    {
      "args": ["::minsky::PlotTab"],
      "ret": "::minsky::PlotTab"
    }
  ],
  "/plotTab/bottomRowMargin": [
    {
      "args": [],
      "ret": "std::vector<double>"
    },
    {
      "args": ["std::vector<double>"],
      "ret": "std::vector<double>"
    }
  ],
  "/plotTab/cell": [
    {
      "args": ["unsigned int", "unsigned int"],
      "ret": "::ecolab::Pango&"
    },
    {
      "args": ["unsigned int", "unsigned int"],
      "ret": "::ecolab::Pango&"
    }
  ],
  "/plotTab/clickType": [
    {
      "args": ["double", "double"],
      "ret": "::minsky::ItemTab::ClickType"
    },
    {
      "args": ["double", "double"],
      "ret": "::minsky::ItemTab::ClickType"
    }
  ],
  "/plotTab/colX": {
    "args": ["double"],
    "ret": "int"
  },
  "/plotTab/displayDelayedTooltip": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/plotTab/draw": [
    {
      "args": [],
      "ret": "void"
    },
    {
      "args": [],
      "ret": "void"
    },
    {
      "args": ["cairo_t*"],
      "ret": "void"
    },
    {
      "args": ["cairo_t*"],
      "ret": "void"
    }
  ],
  "/plotTab/evenHeight": {
    "args": [],
    "ret": "bool"
  },
  "/plotTab/getItemAt": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/plotTab/getVarName": {
    "args": ["int"],
    "ret": "std::string"
  },
  "/plotTab/height": {
    "args": [],
    "ret": "float"
  },
  "/plotTab/item": [
    {
      "args": [],
      "ret": "::minsky::Item"
    },
    {
      "args": ["::minsky::Item"],
      "ret": "::minsky::Item"
    }
  ],
  "/plotTab/itemAt": {
    "args": ["float", "float"],
    "ret": "classdesc::shared_ptr<::minsky::Item>"
  },
  "/plotTab/itemFocus": [
    {
      "args": [],
      "ret": "::minsky::Item"
    },
    {
      "args": ["::minsky::Item"],
      "ret": "::minsky::Item"
    }
  ],
  "/plotTab/itemSelector": [
    {
      "args": ["const classdesc::shared_ptr<::minsky::Item>&"],
      "ret": "bool"
    },
    {
      "args": ["const classdesc::shared_ptr<::minsky::Item>&"],
      "ret": "bool"
    }
  ],
  "/plotTab/itemVector": [
    {
      "args": [],
      "ret": "std::vector<classdesc::shared_ptr<::minsky::Item>>"
    },
    {
      "args": ["std::vector<classdesc::shared_ptr<::minsky::Item>>"],
      "ret": "std::vector<classdesc::shared_ptr<::minsky::Item>>"
    }
  ],
  "/plotTab/justification": {
    "args": ["unsigned int"],
    "ret": "::minsky::JustificationStruct::Justification"
  },
  "/plotTab/m_height": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/plotTab/m_width": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/plotTab/mouseDownCommon": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/plotTab/mouseMove": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/plotTab/mouseUp": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/plotTab/moveItemTo": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/plotTab/moveOffsX": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/plotTab/moveOffsY": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/plotTab/moveTo": {
    "args": ["double", "double"],
    "ret": "void"
  },
  "/plotTab/numCols": [
    {
      "args": [],
      "ret": "unsigned int"
    },
    {
      "args": [],
      "ret": "unsigned int"
    }
  ],
  "/plotTab/numRows": [
    {
      "args": [],
      "ret": "unsigned int"
    },
    {
      "args": [],
      "ret": "unsigned int"
    }
  ],
  "/plotTab/offsx": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/plotTab/offsy": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/plotTab/populateItemVector": {
    "args": [],
    "ret": "void"
  },
  "/plotTab/redraw": [
    {
      "args": ["int", "int", "int", "int"],
      "ret": "bool"
    },
    {
      "args": ["int", "int", "int", "int"],
      "ret": "bool"
    }
  ],
  "/plotTab/redrawWithBounds": {
    "args": [],
    "ret": "void"
  },
  "/plotTab/registerImage": {
    "args": [],
    "ret": "void"
  },
  "/plotTab/renderFrame": {
    "args": ["unsigned long", "int", "int", "int", "int"],
    "ret": "void"
  },
  "/plotTab/renderToEMF": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/plotTab/renderToPDF": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/plotTab/renderToPNG": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/plotTab/renderToPS": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/plotTab/renderToSVG": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/plotTab/reportDrawTime": {
    "args": ["double"],
    "ret": "void"
  },
  "/plotTab/requestRedraw": {
    "args": [],
    "ret": "void"
  },
  "/plotTab/resizeWindow": {
    "args": ["int", "int", "int", "int"],
    "ret": "void"
  },
  "/plotTab/resolutionScaleFactor": [
    {
      "args": [],
      "ret": "double"
    },
    {
      "args": ["double"],
      "ret": "double"
    }
  ],
  "/plotTab/rightColMargin": [
    {
      "args": [],
      "ret": "std::vector<double>"
    },
    {
      "args": ["std::vector<double>"],
      "ret": "std::vector<double>"
    }
  ],
  "/plotTab/rowY": {
    "args": ["double"],
    "ret": "int"
  },
  "/plotTab/togglePlotDisplay": {
    "args": [],
    "ret": "void"
  },
  "/plotTab/toggleVarDisplay": {
    "args": ["int"],
    "ret": "void"
  },
  "/plotTab/varAttrib": [
    {
      "args": [],
      "ret": "std::vector<std::string>"
    },
    {
      "args": ["std::vector<std::string>"],
      "ret": "std::vector<std::string>"
    }
  ],
  "/plotTab/vectorRender": {
    "args": ["const char*", "<function>*"],
    "ret": "classdesc::shared_ptr<ecolab::cairo::Surface>"
  },
  "/plotTab/width": {
    "args": [],
    "ret": "float"
  },
  "/plotTab/xItem": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/plotTab/xoffs": [
    {
      "args": [],
      "ret": "double"
    },
    {
      "args": ["double"],
      "ret": "double"
    }
  ],
  "/plotTab/yItem": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/popFlags": {
    "args": [],
    "ret": "void"
  },
  "/populateMissingDimensions": {
    "args": [],
    "ret": "void"
  },
  "/populateMissingDimensionsFromVariable": {
    "args": ["const ::minsky::VariableValue&"],
    "ret": "void"
  },
  "/pushFlags": {
    "args": [],
    "ret": "void"
  },
  "/pushHistory": {
    "args": [],
    "ret": "bool"
  },
  "/putClipboard": {
    "args": ["const std::string&"],
    "ret": "void"
  },
  "/randomLayout": {
    "args": [],
    "ret": "void"
  },
  "/ravelVersion": {
    "args": [],
    "ret": "std::string"
  },
  "/redrawAllGodleyTables": {
    "args": [],
    "ret": "void"
  },
  "/renderAllPlotsAsSVG": {
    "args": ["const std::string&"],
    "ret": "void"
  },
  "/renderCanvasToEMF": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/renderCanvasToPDF": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/renderCanvasToPNG": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/renderCanvasToPS": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/renderCanvasToSVG": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/renderEquationsToImage": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/reset": {
    "args": [],
    "ret": "void"
  },
  "/resetIfFlagged": [
    {
      "args": [],
      "ret": "bool"
    },
    {
      "args": [],
      "ret": "bool"
    }
  ],
  "/reset_flag": {
    "args": [],
    "ret": "bool"
  },
  "/reverse": [
    {
      "args": [],
      "ret": "bool"
    },
    {
      "args": ["bool"],
      "ret": "bool"
    }
  ],
  "/rkreset": {
    "args": [],
    "ret": "void"
  },
  "/rkstep": {
    "args": [],
    "ret": "void"
  },
  "/runItemDeletedCallback": {
    "args": ["const ::minsky::Item&"],
    "ret": "void"
  },
  "/running": [
    {
      "args": [],
      "ret": "bool"
    },
    {
      "args": ["bool"],
      "ret": "bool"
    }
  ],
  "/save": {
    "args": ["const std::string&"],
    "ret": "void"
  },
  "/saveCanvasItemAsFile": {
    "args": ["const std::string&"],
    "ret": "void"
  },
  "/saveGroupAsFile": {
    "args": ["const ::minsky::Group&", "const std::string&"],
    "ret": "void"
  },
  "/saveSelectionAsFile": {
    "args": ["const std::string&"],
    "ret": "void"
  },
  "/setAllDEmode": {
    "args": ["bool"],
    "ret": "void"
  },
  "/setAutoSaveFile": {
    "args": ["const std::string&"],
    "ret": "void"
  },
  "/setBusyCursor": {
    "args": [],
    "ret": "void"
  },
  "/setGodleyDisplayValue": {
    "args": ["bool", "::minsky::GodleyTable::DisplayStyle"],
    "ret": "void"
  },
  "/setGodleyIconResource": {
    "args": ["const std::string&"],
    "ret": "void"
  },
  "/setGroupIconResource": {
    "args": ["const std::string&"],
    "ret": "void"
  },
  "/setLockIconResource": {
    "args": ["const std::string&", "const std::string&"],
    "ret": "void"
  },
  "/simulationDelay": [
    {
      "args": [],
      "ret": "int"
    },
    {
      "args": ["int"],
      "ret": "int"
    }
  ],
  "/srand": {
    "args": ["int"],
    "ret": "void"
  },
  "/step": {
    "args": [],
    "ret": "std::vector<double>"
  },
  "/stepMax": [
    {
      "args": [],
      "ret": "double"
    },
    {
      "args": ["double"],
      "ret": "double"
    }
  ],
  "/stepMin": [
    {
      "args": [],
      "ret": "double"
    },
    {
      "args": ["double"],
      "ret": "double"
    }
  ],
  "/stockVars": [
    {
      "args": [],
      "ret": "std::vector<double>"
    },
    {
      "args": ["std::vector<double>"],
      "ret": "std::vector<double>"
    }
  ],
  "/t": [
    {
      "args": [],
      "ret": "double"
    },
    {
      "args": ["double"],
      "ret": "double"
    }
  ],
  "/t0": [
    {
      "args": [],
      "ret": "double"
    },
    {
      "args": ["double"],
      "ret": "double"
    }
  ],
  "/timeUnit": [
    {
      "args": [],
      "ret": "std::string"
    },
    {
      "args": ["std::string"],
      "ret": "std::string"
    }
  ],
  "/tmax": [
    {
      "args": [],
      "ret": "double"
    },
    {
      "args": ["double"],
      "ret": "double"
    }
  ],
  "/undo": {
    "args": ["int"],
    "ret": "long"
  },
  "/variableTab": [
    {
      "args": [],
      "ret": "::minsky::VariableTab"
    },
    {
      "args": ["::minsky::VariableTab"],
      "ret": "::minsky::VariableTab"
    }
  ],
  "/variableTab/bottomRowMargin": [
    {
      "args": [],
      "ret": "std::vector<double>"
    },
    {
      "args": ["std::vector<double>"],
      "ret": "std::vector<double>"
    }
  ],
  "/variableTab/cell": [
    {
      "args": ["unsigned int", "unsigned int"],
      "ret": "::ecolab::Pango&"
    },
    {
      "args": ["unsigned int", "unsigned int"],
      "ret": "::ecolab::Pango&"
    }
  ],
  "/variableTab/clickType": {
    "args": ["double", "double"],
    "ret": "::minsky::ItemTab::ClickType"
  },
  "/variableTab/colX": {
    "args": ["double"],
    "ret": "int"
  },
  "/variableTab/displayDelayedTooltip": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/variableTab/draw": [
    {
      "args": [],
      "ret": "void"
    },
    {
      "args": [],
      "ret": "void"
    },
    {
      "args": ["cairo_t*"],
      "ret": "void"
    }
  ],
  "/variableTab/evenHeight": {
    "args": [],
    "ret": "bool"
  },
  "/variableTab/getItemAt": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/variableTab/getVarName": {
    "args": ["int"],
    "ret": "std::string"
  },
  "/variableTab/height": {
    "args": [],
    "ret": "float"
  },
  "/variableTab/item": [
    {
      "args": [],
      "ret": "::minsky::Item"
    },
    {
      "args": ["::minsky::Item"],
      "ret": "::minsky::Item"
    }
  ],
  "/variableTab/itemAt": {
    "args": ["float", "float"],
    "ret": "classdesc::shared_ptr<::minsky::Item>"
  },
  "/variableTab/itemFocus": [
    {
      "args": [],
      "ret": "::minsky::Item"
    },
    {
      "args": ["::minsky::Item"],
      "ret": "::minsky::Item"
    }
  ],
  "/variableTab/itemSelector": [
    {
      "args": ["const classdesc::shared_ptr<::minsky::Item>&"],
      "ret": "bool"
    },
    {
      "args": ["const classdesc::shared_ptr<::minsky::Item>&"],
      "ret": "bool"
    }
  ],
  "/variableTab/itemVector": [
    {
      "args": [],
      "ret": "std::vector<classdesc::shared_ptr<::minsky::Item>>"
    },
    {
      "args": ["std::vector<classdesc::shared_ptr<::minsky::Item>>"],
      "ret": "std::vector<classdesc::shared_ptr<::minsky::Item>>"
    }
  ],
  "/variableTab/justification": {
    "args": ["unsigned int"],
    "ret": "::minsky::JustificationStruct::Justification"
  },
  "/variableTab/m_height": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/variableTab/m_width": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/variableTab/mouseDownCommon": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/variableTab/mouseMove": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/variableTab/mouseUp": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/variableTab/moveItemTo": {
    "args": ["float", "float"],
    "ret": "void"
  },
  "/variableTab/moveOffsX": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/variableTab/moveOffsY": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/variableTab/moveTo": {
    "args": ["double", "double"],
    "ret": "void"
  },
  "/variableTab/numCols": [
    {
      "args": [],
      "ret": "unsigned int"
    },
    {
      "args": [],
      "ret": "unsigned int"
    }
  ],
  "/variableTab/numRows": [
    {
      "args": [],
      "ret": "unsigned int"
    },
    {
      "args": [],
      "ret": "unsigned int"
    }
  ],
  "/variableTab/offsx": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/variableTab/offsy": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/variableTab/populateItemVector": {
    "args": [],
    "ret": "void"
  },
  "/variableTab/redraw": [
    {
      "args": ["int", "int", "int", "int"],
      "ret": "bool"
    },
    {
      "args": ["int", "int", "int", "int"],
      "ret": "bool"
    }
  ],
  "/variableTab/redrawWithBounds": {
    "args": [],
    "ret": "void"
  },
  "/variableTab/registerImage": {
    "args": [],
    "ret": "void"
  },
  "/variableTab/renderFrame": {
    "args": ["unsigned long", "int", "int", "int", "int"],
    "ret": "void"
  },
  "/variableTab/renderToEMF": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/variableTab/renderToPDF": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/variableTab/renderToPNG": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/variableTab/renderToPS": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/variableTab/renderToSVG": {
    "args": ["const char*"],
    "ret": "void"
  },
  "/variableTab/reportDrawTime": {
    "args": ["double"],
    "ret": "void"
  },
  "/variableTab/requestRedraw": {
    "args": [],
    "ret": "void"
  },
  "/variableTab/resizeWindow": {
    "args": ["int", "int", "int", "int"],
    "ret": "void"
  },
  "/variableTab/resolutionScaleFactor": [
    {
      "args": [],
      "ret": "double"
    },
    {
      "args": ["double"],
      "ret": "double"
    }
  ],
  "/variableTab/rightColMargin": [
    {
      "args": [],
      "ret": "std::vector<double>"
    },
    {
      "args": ["std::vector<double>"],
      "ret": "std::vector<double>"
    }
  ],
  "/variableTab/rowY": {
    "args": ["double"],
    "ret": "int"
  },
  "/variableTab/toggleVarDisplay": {
    "args": ["int"],
    "ret": "void"
  },
  "/variableTab/varAttrib": [
    {
      "args": [],
      "ret": "std::vector<std::string>"
    },
    {
      "args": ["std::vector<std::string>"],
      "ret": "std::vector<std::string>"
    }
  ],
  "/variableTab/vectorRender": {
    "args": ["const char*", "<function>*"],
    "ret": "classdesc::shared_ptr<ecolab::cairo::Surface>"
  },
  "/variableTab/width": {
    "args": [],
    "ret": "float"
  },
  "/variableTab/xItem": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/variableTab/xoffs": [
    {
      "args": [],
      "ret": "double"
    },
    {
      "args": ["double"],
      "ret": "double"
    }
  ],
  "/variableTab/yItem": [
    {
      "args": [],
      "ret": "float"
    },
    {
      "args": ["float"],
      "ret": "float"
    }
  ],
  "/variableTypes": {
    "args": [],
    "ret": "std::vector<std::string>"
  },
  "/variableValues": [
    {
      "args": [],
      "ret": "::minsky::VariableValues"
    },
    {
      "args": ["::minsky::VariableValues"],
      "ret": "::minsky::VariableValues"
    }
  ]
}
